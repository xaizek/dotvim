*vifm.txt*    For Vifm version 0.7.6  Last change: 2014 Mar 09

 Email for bugs and suggestions: <xaizek@openmailbox.org>

|vifm-options|            Command line arguments.
|vifm-general-keys|       General keys, that work in the most of modes.
|vifm-normal|             Normal mode keys.
|vifm-visual|             Visual mode keys.
|vifm-view|               View mode keys.
|vifm-command-line|       Command line mode keys.
|vifm-command-line-edit|  External editing of command line content.
|vifm-commands|           How to use and set :commands.
|vifm-commands-bg|        Backgrounding of commands.
|vifm-cancellation|       Cancellation of commands.
|vifm-globs|              Description of how about globs work in vifm.
|vifm-set-options|        Available options.
|vifm-mappings|           Special sequences.
|vifm-expression-syntax|  Syntax of supported expressions.
|vifm-functions|          List of builtin functions with description.
|vifm-startup|            Determining of environment variables on startup.
|vifm-configure|          Configuration of vifm.
|vifm-menus-and-dialogs|  Keys for menus and dialogs.
|vifm-view-look|          Gives general overview of view displaying variants.
|vifm-ls-view|            Some details about ls-like view.
|vifm-column-view|        Column view configuration details.
|vifm-colorschemes|       Details on using color schemes in vifm.
|vifm-fuse|               Using automated FUSE mounts.
|vifm-trash|              Details about trash directory in vifm.
|vifm-clientserver|       Client-server communication.
|vifm-plugin|             Using the vifm.vim plugin.
|vifm-reserved|           List of reserved commands.
|vifm-see-also|           Other resources about vifm.

Tag name structure:

          WHAT                 PREPEND     EXAMPLE~
      Normal mode command      vifm-       :help vifm-h
      Visual mode command      vifm-v_     :help vifm-v_u
      View mode command        vifm-q_     :help vifm-q_j
      Menu or dialog command   vifm-m_     :help vifm-m_zh
      Command-line command     vifm-:      :help vifm-:quit
      Command-line editing     vifm-c_     :help vifm-c_CTRL-H
      Vifm command argument    vifm--      :help vifm--f
      Option                   vifm-'      :help vifm-'wrap'

--------------------------------------------------------------------------------
*vifm-options*

General format:
vifm [OPTION]... [ LWIN_DIR [ RWIN_DIR ] ]

The vifm executable will start vifm in the current directory unless it is
given a different directory on the command line.

vifm /path/to/directory/one
or
vifm /path/to/directory/one /path/to/directory/two

Specifying two directories triggers split view even when vifm was in
single-view mode on finishing previous session.  To suppress this behaviour
|vifm-:only| command can be put in the vifmrc file.

When only one path argument is found on command-line, the left/top pane is
automatically set as the current view.


                                               *vifm---select*
Paths to files are also allowed in case you want vifm to start with some
archive opened.  If you want to select file, prepend its path with --select.

The other command line arguments are:
                                               *vifm--f*
-f - only used from the vifm.vim script.  The selected files are written
    to $VIFM/vimfiles and vifm exits.

--logging                                      *vifm---logging*
    log some errors to $VIFM/log.
    Also /var/log/vifm-startup-log (on *nix) and startup-log in the directory
    of executable (on Windows) is used to log startup process (when
    configuration directory isn't determined).
--remote                                       *vifm---remote*
    sends the rest of command line to the active vifm server (one of already
    running instances if any).  When there is no server, quits silently.
    There is no limit on how many arguments can be processed.  One can
    combine --remote with -c <command> or +<command> to execute command in
    already running instance of vifm.  See also |vifm-clientserver|.
-c <command>, +<command>                       *vifm--c* *vifm--+c*
    run command-line mode <command> on startup.  Commands in such arguments
    are executed in the order they appear in command line.  Commands with
    spaces or special symbols must be enclosed in double or single quotes or
    all special symbols should be escaped (the exact syntax strongly depends
    on shell).
--help, -h                                     *vifm---help* *vifm--h*
    show a brief command summary and exit vifm.
--version, -v                                  *vifm---version* *vifm--v*
    show the version information and exit.
--no-configs                                   *vifm---no-configs*
    don't read vifmrc and vifminfo.

See |vifm-startup| section below for the explanations on |vifm-$VIFM|.

-------------------------------------------------------------------------------
*vifm-general-keys*

                                               *vifm-Escape* *vifm-CTRL-C*
Ctrl-C or Escape - cancel most operations (see |vifm-cancellation|), clear all
    selected files.

                                               *vifm-CTRL-L*
Ctrl-L - clear and redraw the screen.

--------------------------------------------------------------------------------
*vifm-normal*

Basic Movement~

The basic vi key bindings are used to move through the files and popup windows.

k, gk or Ctrl-P moves cursor up one line.      *vifm-k* *vifm-gk* *vifm-CTRL-P*
j, gj or Ctrl-N moves cursor down one line.    *vifm-j* *vifm-gj* *vifm-CTRL-N*

                                               *vifm-h*
when |vifm-'lsview'| is off moves up one directory, otherwise moves left one
file.

                                               *vifm-l*
l - when |vifm-'lsview'| is off moves into a directory or launches a file,
    otherwise moves left one file.

                                               *vifm-gg*
gg will move to the first line of the file list.

                                               *vifm-gh*
gh is up one directory.

                                               *vifm-gl* *vifm-Enter*
gl or Enter moves into a directory or launches a file.

                                               *vifm-G*
G will move to the last line in the file list.


                                               *vifm-H*
H - move to the first file in the window.

                                               *vifm-M*
M - move to the file in the middle of the window.

                                               *vifm-L*
L - move to the last file in the window.


Ctrl-F or Page Down - move forward one page.   *vifm-CTRL-F* *vifm-PageDown*
Ctrl-B or Page Up - move back one page.        *vifm-CTRL-B* *vifm-PageUp*

Ctrl-D - jump back one half page.              *vifm-CTRL-D*
Ctrl-U - jump forward one half page.           *vifm-CTRL-U*

                                               *vifm-%*
n% move to nth file of the file list (for example 25%).

                                               *vifm-0* *vifm-^*
move cursor to the first column.  See |vifm-'lsview'| option description.

                                               *vifm-$*
move cursor to the last column.  See |vifm-'lsview'| option description.

                                               *vifm-Space*
switch file lists.

Movement with Count~

Most movement commands also accept a count, 12j would move down 12 files.
[count]% move to percent of the file list.
[count]j move down count files.
[count]k move up count files.
[count]G or gg move to list position count.

Scrolling panes~

zt - redraw pane with file in top of list.     *vifm-zt*
zz - redraw pane with file in center of list.  *vifm-zz*
zb - redraw pane with file in bottom of list.  *vifm-zb*
Ctrl-E - scroll pane one line down.            *vifm-CTRL-E*
Ctrl-Y - scroll pane one line up.              *vifm-CTRL-Y*

Pane manipulation~

Second character can be entered with or without Control key.

Ctrl-W H - move the pane to the far left.      *vifm-CTRL-W_H*
Ctrl-W J - move the pane to the very bottom.   *vifm-CTRL-W_J*
Ctrl-W K - move the pane to the very top.      *vifm-CTRL-W_K*
Ctrl-W L - move the pane to the far right.     *vifm-CTRL-W_L*

Ctrl-W h - switch to left pane.                *vifm-CTRL-W_h*
Ctrl-W j - switch to pane below.               *vifm-CTRL-W_j*
Ctrl-W k - switch to pane above.               *vifm-CTRL-W_k*
Ctrl-W l - switch to right pane.               *vifm-CTRL-W_l*

Ctrl-W b - switch to bottom-right window.      *vifm-CTRL-W_b*
Ctrl-W t - switch to top-left window.          *vifm-CTRL-W_t*

Ctrl-W p - switch to previous window.          *vifm-CTRL-W_p*
Ctrl-W w - switch to other pane.               *vifm-CTRL-W_w*

Ctrl-W o - shortcut for |vifm-:only|.            *vifm-CTRL-W_o*
Ctrl-W s - shortcut for |vifm-:split|.           *vifm-CTRL-W_s*
Ctrl-W v - shortcut for |vifm-:vsplit|.          *vifm-CTRL-W_v*

Ctrl-W x - exchange panes.                     *vifm-CTRL-W_x*
Ctrl-W z - quit preview pane or view modes.    *vifm-CTRL-W_z*

Ctrl-W + - increase size of the view by count. *vifm-CTRL-W_+*
Ctrl-W - - decrease size of the view by count. *vifm-CTRL-W_-*
Ctrl-W < - increase size of the view by count. *vifm-CTRL-W_<*
Ctrl-W > - decrease size of the view by count. *vifm-CTRL-W_>*
Ctrl-W | - maximize current view.              *vifm-CTRL-W_|*
Ctrl-W _ - maximize current view.              *vifm-CTRL-W__*
Ctrl-W = - make size of two views equal.       *vifm-CTRL-W_=*

For Ctrl-W +, Ctrl-W -, Ctrl-W < and Ctrl-W > commands count
can be given before and/or after Ctrl-W.  The resulting count
is a multiplication of those two.  So "2 Ctrl-W 2 - " will
decrease window size by 4 lines or columns.

Marks~

Marks are set the same way as they are in vi.
You can use this characters for marks [a-z][A-Z][0-9].

                                               *vifm-m*
m[a-z][A-Z][0-9] will set a mark at the current cursor position.

                                               *vifm-'*
'[a-z][A-Z][0-9] moves to the file set for the mark.


There are also several special marks that can't be set manually:
 ' (single quote) - previously visited directory of the view, thus hitting
                    '' allows switching between two last locations
 < - the first file of the last visually selected block
 > - the last file of the last visually selected block

Searching~

                                               *vifm-/*
/regular expression - select files matching regular expression. Forward
    search.

                                               *vifm-?*
?regular expression - select files matching regular expression. Backward
    search.

                                               *vifm-n* *vifm-N*
[count]n - go to the next file matching last search pattern.  Takes last
    search direction into account.
[count]N - go to the previous file matching last search pattern.  Takes
    last search direction into account.

    If |vifm-'hlsearch'| is set, hitting n/N to perform search and go to the
    first matching item resets current selection in normal mode.  It is
    not the case if search was already performed on files in the directory,
    thus selection is not reset after clearing selection with escape key
    and hitting n/N key again.

Note: vifm uses extended regular expressions for / and ?.


                                               *vifm-f*
[count]f[character] - search forward for file with [character] as first
    character in name.  Search wraps around the end of the list.

                                               *vifm-F*
[count]F[character] - search backward for file with [character] as first
    character in name.  Search wraps around the end of the list.

                                               *vifm-;*
[count]; - find the next match of f or F.

                                               *vifm-,*
[count], - find the previous match of f or F.

Note: f, F, ; and , wrap around list beginning and end when they are used
alone and they don't wrap when they are used as selectors.

Filters~
                                               *vifm-filters*
There are three basic file filters:
 - dot files filter (excluding "." and ".." special directories, which
   appearance is controlled by the |vifm-'dotdirs'| option)
 - manual filter for file names
 - automatic filter for file names
 - local filter for file names (see |vifm-=|)

Performing operations on manual filter for file names automatically does the
same on automatic one.  The file name filter is separated mainly for
convenience purpose and to get more deterministic behaviour.

The basic vim folding key-bindings are used for filters.

                                               *vifm-za*
za - toggles the showing and hiding of dot files.

                                               *vifm-zo*
zo - show the dot files.

                                               *vifm-zf*
zf - add the selected files to the file name filter.

                                               *vifm-zm*
zm - hide the dot files.

                                               *vifm-zO*
zO - show the hidden by file name filter files.

                                               *vifm-zM*
zM - restore all filters.

                                               *vifm-zR*
zR - remove all filters.

                                               *vifm-=*
=regular expression - filter out files that don't match regular expression.
    This kind of filter is automatically reset when directory is changed.

Each file list has its own copy of each filter.

Filtered files are not checked in / search or :commands.

Files and directories are filtered separately.  For this a slash is appended
to a directory name before testing whether it matches the filter.  Examples:
>
 " filter directories which names end with '.files'
 :filter /^.*\.files/$/

 " filter files which names end with '.d'
 :filter /^.*\.d$/

 " filter files and directories which names end with '.o'
 :filter /^.*\.o\/?$/
<
Note: vifm uses extended regular expressions.

Other Normal Mode Keys~

                                               *vifm-:*
[count]: - enter command line mode.  Count will add range.

                                               *vifm-q:*
q: - open external editor to prompt for command-line command.  See
    |vifm-command-line-edit| section for details.

                                               *vifm-q/*
q/ - open external editor to prompt for search pattern to be searched
    in forward direction.  See |vifm-command-line-edit| section for
    details.

                                               *vifm-q?*
q? - open external editor to prompt for search pattern to be searched
    in backward direction.  See |vifm-command-line-edit| section for
    details.

                                               *vifm-q=*
q= - open external editor to prompt for filter pattern.  See
    |vifm-command-line-edit| section for details.  Unlike other q{x}
    commands this one doesn't work in Visual mode.

                                               *vifm-!!*
[count]!! and [count]!<selector> - enter command line mode with entered !
    command.  Count will modify range.

                                               *vifm-CTRL-O*
Ctrl-O - go backward through history.

                                               *vifm-CTRL-I* *vifm-Tab*
Ctrl-I - if |vifm-'cpoptions'| contains "t" flag (|vifm-cpo-t|), <tab> and
    <c-i> switch active pane just like |vifm-Space| does, otherwise it
    goes forward through directory history of the current view.

                                               *vifm-CTRL-G*
Ctrl-G - creates a window showing detailed information about the current
    file.

                                               *vifm-SHIFT-Tab*
Shift-Tab - enters view mode (|vifm-view|, works only after activating view pane with
    :view command).

ga - calculate size of directory.              *vifm-ga*
gA - like ga, but force update.                *vifm-gA*

                                               *vifm-gf*
gf - find link destination (like l with |vifm-'followlinks'| off, but also
    finds directories).

                                               *vifm-gr*
                                               {only for MS-Windows}
gr - same as l key, but tries to run program with administrative
    privileges.


                                               *vifm-gv*
gv - go to visual mode restoring last selection.

                                               *vifm-gs*
gs - restore last t selection, like gv for visual mode selection.


                                               *vifm-gu*
gu<selector> - make names of selected files lowercase.
                                               *vifm-guu*
[count]guu - make names of [count] files starting from the current
    one lowercase.  Without [count] only current file is affected.
                                               *vifm-gugu*
[count]gugu - make names of [count] files starting from the current
    one lowercase.  Without [count] only current file is affected.

                                               *vifm-gU*
gU<selector> - make names of selected files uppercase.
                                               *vifm-gUU*
[count]gUU - make names of [count] files starting from the current
    one uppercase.  Without [count] only current file is affected.
                                               *vifm-gUgU*
[count]gUgU - make names of [count] files starting from the current
    one uppercase.  Without [count] only current file is affected.


                                               *vifm-e*
e - explore file in the current pane

                                               *vifm-i*
i - handle file (even if it's executable and |vifm-'runexec'| is set).


                                               *vifm-cw*
cw - change word is used to rename a file or files.

                                               *vifm-cW*
cW - change WORD is used to change only name of file (without extension).

                                               *vifm-cl*
cl - change link target.

                                               *vifm-co*
co - change owner of file.                     {only for *nix}

                                               *vifm-cg*
cg - change group of file.                     {only for *nix}

                                               *vifm-cp*
cp - change file attributes (permission on *nix and properties on
    Windows).


                                               *vifm-C*
[count]C - clone file [count] times.

                                               *vifm-d* *vifm-dd*
dd - move selected file or files to |vifm-trash| directory (if option
    |vifm-'trash'| is set, otherwise delete).
d<selector> - like dd.

                                               *vifm-D* *vifm-DD*
DD and D<selector> - like dd and d<selector>, but omitting |vifm-trash|
    directory (even when |vifm-'trash'| option is set).

yy, Y - yank selected files.                   *vifm-yy* *vifm-Y*
y<selector> - yank files.                      *vifm-y*

                                               *vifm-p*
p - will copy the yanked files to the current directory or move the files
    to the current directory if they were deleted with dd or :d[elete] or
    if the files were yanked from |vifm-trash| directory.

                                               *vifm-P*
P - moves the last yanked files.  The advantage of using P instead of d
    followed by p is that P moves files only once.  This isn't important in
    case you're moving files in the same file system where your home
    directory is, but using P to move files on some other file system (or
    file systems, in case you want to move files from fs1 to fs2 and your
    home is on fs3) can save your time.

al - puts symbolic links with absolute paths.  *vifm-al*
rl - puts symbolic links with relative paths.  *vifm-rl*

t - select or unselect (tag) the current file  *vifm-t*

u - undo last command.                         *vifm-u*
Ctrl-R - redo last command.                    *vifm-CTRL-R*

v, V - start visual selection of files.        *vifm-v* *vifm-V*


                                               *vifm-CTRL-A*
[count]Ctrl-A - increment first number in file name by count (1 by default).

                                               *vifm-CTRL-X*
[count]Ctrl-X - decrement first number in file name by count (1 by default).


ZQ - same as :quit!                            *vifm-ZQ*
ZZ - same as :quit                             *vifm-ZZ*


                                               *vifm-.*
. - repeat last command line command (not normal mode command) of this
    session (does nothing right after startup or |vifm-:restart| command).
    The command doesn't depend on command-line history and can be used
    with completely disabled history.


                                               *vifm-(*
( - goto previous group.  Groups are defined by primary sorting key.
    For name and iname members of each group have same first letter,
    for all other sorting keys vifm uses size, uid, ...

                                               *vifm-)*
) - goto next group.  See ( key description above.

Using Count~
                                               *vifm-count* *vifm-[count]*
You can use count with commands like yy.

[count]yy yank (count + 1) files starting from current cursor position
downward.

Or you can use count with motions passed to y, d or D.

d[count]j delete (count + 1) files starting from current cursor position
upward.

Registers~
                                               *vifm-registers*
vifm supports multiple registers for temporary storing list of yanked or
deleted files.

Registers should be specified with hitting double quite key followed by a
register name.  Count is specified after register name.  By default
commands use unnamed register, which has double quote as its name.

Though all commands accept registers, most of commands ignores them (for
example H or Ctrl-U).  Other commands can fill register or append new
files to it.

Presently vifm supports ", _, a-z and A-Z characters as register names.

_ is black hole register.  It can be used for writing, but its list is always
empty.

As mentioned above " is unnamed register and has special meaning of the
default register.  Every time when you use named registers (a-z and A-Z)
unnamed register is updated to contain same list of files as the last
used register.

Registers with names from a to z  and from A to Z are named ones.
Lowercase registers are cleared before adding new files, while uppercase
aren't and should be used to append new files to the existing file list
of appropriate lowercase register (A for a, B for b, ...).

Registers can be changed on :empty command if they contain files under
|vifm-trash| directory.

Registers do not contain one file more than once.

Example:
  "a2yy
will put names of two files to register a (and to the unnamed register).
  "Ad
will remove one file and append its name to register a (and to the
unnamed register).
  p or "ap or "Ap
will insert previously yanked and deleted files into current directory.

Selectors~
                                               *vifm-selectors*
y, d, D, !, gu and gU commands accept selectors.  You can combine them with
any of selectors below to quickly remove or yank several files.

j, k, gg, G, H, L, M, %, f, F, ;, comma, ', ^, 0 and $ can be used as
selectors for several commands.
Also following selectors can be used:
 a - all files in current view
 s - selected files
 S - all files except selected

For example:
dj - delete file under cursor and one below.
d2j - delete file under cursor and two below.
y6gg - yank all files from cursor position to 6th file in the list.

When you pass a count to whole command and its selector they are
multiplied. So:
2d2j - delete file under cursor and four below.
2dj - delete file under cursor and two below.
2y6gg - yank all files from cursor position to 12th file in the list.

--------------------------------------------------------------------------------
*vifm-visual*

In visual mode work almost all normal mode keys, but they do not accept
selectors.

                                               *vifm-v_Enter*
Enter - save selection and go back to normal mode.

                                               *vifm-v_gv*
gv - restore previous visual selection.

                                               *vifm-v_Escape* *vifm-v_CTRL-C*
                                               *vifm-v_v* *vifm-v_V*
v, V - leave visual mode.

                                               *vifm-v_:*
: - enter command line mode.  When you leave it selection will be cleared.

                                               *vifm-v_o* *vifm-v_O*
o, O - switch active selection bound.

                                               *vifm-v_gu* *vifm-v_u*
gu, u - make names of selected files lowercase.

                                               *vifm-v_gU* *vifm-v_U*
gU, U - make names of selected files uppercase.

--------------------------------------------------------------------------------
*vifm-view*

This mode tries to imitate the less program.  List of builtin shortcuts can be
found below.  Shortcuts can be customized using |vifm-:qmap|, |vifm-:qnoremap| and
|vifm-:qunmap| command-line commands.

                                               *vifm-q_SHIFT-Tab* *vifm-q_Tab*
                                               *vifm-q_q* *vifm-q_Q* *vifm-q_ZZ*
Shift-Tab, Tab, q, Q, ZZ - go back to normal mode.


                                               *vifm-q_e* *vifm-q_CTRL-E*
                                               *vifm-q_j* *vifm-q_CTRL-N*
                                               *vifm-q_Enter*
[count]e, [count]Ctrl-E, [count]j, [count]Ctrl-N, [count]Enter
forward one line (or [count] lines).

                                               *vifm-q_y* *vifm-q_CTRL-Y*
                                               *vifm-q_k* *vifm-q_CTRL-K*
                                               *vifm-q_CTRL-P*
[count]y, [count]Ctrl-Y, [count]k, [count]Ctrl-K, [count]Ctrl-P
backward one line (or [count] lines).


                                               *vifm-q_f* *vifm-q_CTRL-F*
                                               *vifm-q_CTRL-V* *vifm-q_Space*
[count]f, [count]Ctrl-F, [count]Ctrl-V, [count]Space Bar
forward one window (or [count] lines).

                                               *vifm-q_b* *vifm-q_CTRL-B*
                                               *vifm-q_ALT-V*
[count]b, [count]Ctrl-B, [count]Alt-V
backward one window (or [count] lines).


                                               *vifm-q_z*
[count]z - forward one window (and set window to [count]).

                                               *vifm-q_w*
[count]w - backward one window (and set window to [count]).

                                               *vifm-q_ALT-Space*
[count]Alt-Space - forward one window, but don't stop at end-of-file.


                                               *vifm-q_d* *vifm-q_CTRL-D*
[count]d, [count]Ctrl-D - forward one half-window (and set half-window to
    [count]).

                                               *vifm-q_u* *vifm-q_CTRL-U*
[count]u, [count]Ctrl-U - backward one half-window (and set half-window to
    [count]).


                                               *vifm-q_r* *vifm-q_CTRL-R*
                                                        *vifm-q_CTRL-L*
r, Ctrl-R, Ctrl-L, R - repaint screen.

                                               *vifm-q_R*
reload view preserving scroll position.


                                               *vifm-q_/*
[count]/pattern - search forward for ([count]-th) matching line.

                                               *vifm-q_?*
[count]?pattern - search backward for ([count]-th) matching line.

                                               *vifm-q_n*
[count]n - repeat previous search (for [count]-th occurrence).

                                               *vifm-q_N*
[count]N - repeat previous search in reverse direction.


                                               *vifm-q_g* *vifm-q_<*
                                               *vifm-q_ALT-<*
[count]g, [count]<, [count]Alt-< - go to first line in file (or line [count]).

                                               *vifm-q_G* *vifm-q_>*
                                               *vifm-q_ALT->*
[count]G, [count]>, [count]Alt-> - go to last line in file (or line [count]).

                                               *vifm-q_p* *vifm-q_%*
[count]p, [count]% - go to beginning of file (or N percent into file).

                                               *vifm-q_v*
v - edit the current file with vim.


Ctrl-W H - move the pane to the far left.      *vifm-q_CTRL-W_H*
Ctrl-W J - move the pane to the very bottom.   *vifm-q_CTRL-W_J*
Ctrl-W K - move the pane to the very top.      *vifm-q_CTRL-W_K*
Ctrl-W L - move the pane to the far right.     *vifm-q_CTRL-W_L*

Ctrl-W h - switch to left pane.                *vifm-q_CTRL-W_h*
Ctrl-W j - switch to pane below.               *vifm-q_CTRL-W_j*
Ctrl-W k - switch to pane above.               *vifm-q_CTRL-W_k*
Ctrl-W l - switch to right pane.               *vifm-q_CTRL-W_l*

Ctrl-W b - switch to bottom-right window.      *vifm-q_CTRL-W_b*
Ctrl-W t - switch to top-left window.          *vifm-q_CTRL-W_t*

Ctrl-W p - switch to previous window.          *vifm-q_CTRL-W_p*
Ctrl-W w - switch to other pane.               *vifm-q_CTRL-W_w*

Ctrl-W o - leave only one pane.                *vifm-q_CTRL-W_o*
Ctrl-W s - split window horizontally.          *vifm-q_CTRL-W_s*
Ctrl-W v - split window vertically.            *vifm-q_CTRL-W_v*

Ctrl-W x - exchange panes.                     *vifm-q_CTRL-W_x*
Ctrl-W z - quit preview pane or view modes.    *vifm-q_CTRL-W_z*

Ctrl-W + - increase size of the view.          *vifm-q_CTRL-W_+*
Ctrl-W - - decrease size of the view.          *vifm-q_CTRL-W_-*
Ctrl-W < - increase size of the view.          *vifm-q_CTRL-W_<*
Ctrl-W > - decrease size of the view.          *vifm-q_CTRL-W_>*
Ctrl-W | - maximize current view.              *vifm-q_CTRL-W_|*
Ctrl-W _ - maximize current view.              *vifm-q_CTRL-W__*
Ctrl-W = - make size of two views equal.       *vifm-q_CTRL-W_=*

In general, all "Ctrl-W x" keys above work the same was as in |vifm-normal|
mode.  Active mode is automatically changed on navigating among windows.
When less-like activated on file preview is left using one by "Ctrl-W x"
keys, its state is stored until another file is showed using preview (it's
possible to leave the mode, hide preview pane, do something else, then get
back to the file and show preview pane again with previously stored state
in it).

--------------------------------------------------------------------------------
*vifm-command-line*

This keys apply to all submodes of the command line mode: command, prompt and
search.

Down, Up, Left, Right, Home, End and Delete are extended keys and they are not
available if vifm is compiled with --disable-extended-keys option.

                                               *vifm-c_Esc* *vifm-c_CTRL-C*
Esc, Ctrl-C - leave command line mode, cancels input.  Cancelled input is
    saved into appropriate history and can be recalled later.

                                               *vifm-c_CTRL-M* *vifm-c_Enter*
Ctrl-M, Enter - execute command and leave command line mode.

                                               *vifm-c_CTRL-I* *vifm-c_Tab*
Ctrl-I, Tab - complete command or its argument.

                                               *vifm-c_SHIFT-Tab*
Shift-Tab - complete in reverse order.

                                               *vifm-c_CTRL-_*
Ctrl-_ - stop completion and return original input.

                                               *vifm-c_CTRL-K*
Ctrl-K - remove characters from cursor position till the end of line.

                                               *vifm-c_CTRL-U*
Ctrl-U - remove characters from cursor position till the beginning of line.

                                               *vifm-c_CTRL-H*
                                               *vifm-c_Backspace*
Ctrl-H, Backspace - remove character before the cursor.

                                               *vifm-c_CTRL-D* *vifm-c_Delete*
Ctrl-D, Delete - remove character under the cursor.

                                               *vifm-c_CTRL-B* *vifm-c_Left*
Ctrl-B, Left - move cursor to the left.

                                               *vifm-c_CTRL-F* *vifm-c_Right*
Ctrl-F, Right - move cursor to the right.

                                               *vifm-c_CTRL-A* *vifm-c_Home*
Ctrl-A, Home - go to line beginning.

                                               *vifm-c_CTRL-E* *vifm-c_End*
Ctrl-E, End - go to line end

                                               *vifm-c_ALT-B*
Alt-B - go to the beginning of previous word.

                                               *vifm-c_ALT-F*
Alt-F - go to the end of next word.

                                               *vifm-c_CTRL-W*
Ctrl-W - remove characters from cursor position till the beginning of previous
    word.

                                               *vifm-c_ALT-D*
Alt-D - remove characters from cursor position till the beginning of next
    word.

                                               *vifm-c_CTRL-T*
Ctrl-T - swap the order of current and previous character and move cursor
    forward or, if cursor past the end of line, swap the order of two last
    characters in the line.

                                               *vifm-c_ALT-.*
Alt-. - insert last part of previous command to current cursor position.
    Each next call will insert last part of older command.

                                               *vifm-c_CTRL-G*
Ctrl-G - edit command-line content in external editor.  See
    |vifm-command-line-edit| section for details.

                                               *vifm-c_CTRL-N*
Ctrl-N - recall more recent command-line from history.

                                               *vifm-c_CTRL-P*
Ctrl-P - recall older command-line from history.

                                               *vifm-c_Up*
Up - recall more recent command-line from history, that begins as the
    current command-line.

                                               *vifm-c_Down*
Down - recall older command-line from history, that begins as the current
    command-line.

--------------------------------------------------------------------------------
*vifm-command-line-edit*

vifm provides a facility to edit several kinds of data, that is usually edited
in command-line mode, in external editor (using command specified by
|vifm-'vicmd'| or |vifm-'vixcmd'| option).  This has at least two advantages
over built-in command-line mode:
 - one can use full power of Vim to edit text;
 - finding and reusing history entries becomes possible.

The facility is supported by four input submodes of the command-line:
 - command;
 - forward search;
 - backward search;
 - file rename (see |vifm-cw| and |vifm-cW|).

Editing command-line using external editor is activated by the |vifm-c_CTRL-G|
shortcut.  It's also possible to do almost the same from Normal and Visual
modes using |vifm-q:|, |vifm-q/| and |vifm-q?| commands.

Temporary file created for the purpose of editing the line has the following
structure:
 1. First line, which is either empty or contains text already entered in
    command-line.
 2. 2nd and all other lines with history items starting with the most recent
    one.  Altering this lines in any way won't change history items stored by
    vifm.

After editing application is finished the first line of the file is taken as
the result of operation, when the application returns zero exit code.  If the
application returns an error (see |:cquit| command in Vim), all the edits made
to the file are ignored, but the initial value of the first line is saved in
appropriate history.

--------------------------------------------------------------------------------
*vifm-commands*

vifm-commands are executed with :command_name<Return>

Commented out lines should start with the double quote symbol, which may be
preceded by whitespace characters.

Most of the commands have two forms: complete and the short one.
Example: >
    :noh[lsearch]
This means the complete command is nohlsearch, and the short one is noh.

                                               *vifm-commands-and-selection*
Most of command-line commands completely reset selection in the current view.
However, there are several exceptions:
 - ":invert s" will most likely leave some files selected;
 - :if and :else commands doesn't affect selection on successful execution.

                                               *vifm-:bar*
'|' can be used to separate commands, so you can give multiple commands in one
line.  If you want to use '|' in an argument, precede it with '\'.

These commands see '|' as part of their arguments even when it's escaped:

    :[range]!
    :cmap
    :cnoremap
    :command
    :filetype
    :fileviewer
    :filextype
    :map
    :mmap
    :mnoremap
    :nmap
    :nnoremap
    :noremap
    :normal
    :qmap
    :qnoremap
    :vmap
    :vnoremap
    :windo
    :winrun

To be able to use another command after one of these, wrap it with the
|vifm-:execute| command.  An example: >

    if filetype('.') == 'reg' | execute '!!echo regular file' | endif
<
                                               *vifm-:range*
:number - move to the file number.
:12 would move to the 12th file in the list.
:0 move to the top of the list.
:$ move to the bottom of the list.
See |vifm-ranges| for the ranges implemented.

:[count]command
The only builtin :[count]command are :[count]d[elete] and :[count]y[ank].
Examples:
:d3 - would delete three files starting at the current file position
    moving down.
:3d - would delete one file at the third line in the list.

See |vifm-reserved| for a list of reserved command names.

The builtin commands are:
                                               *vifm-:!*
:[range]!program - shellout and execute program.
    :!command & will run the process in the background using vifm's means.
    Programs that write to stdout like ls will create an error message
    showing partial output of the command.
    Take note of the space before ampersand symbol, if you omit it, command
    will be run in the background using job control of shell.
    Accepts macros.
                                               *vifm-:!!*
:[range]!!program - same as :! but will pause before returning.
:!! - repeat the last command.

                                               *vifm-:alink*
:[range]alink[!?] - creates absolute symbolic links of files in directory of
    other view.  With "?" vifm will open vi to edit filenames.  "!" forces
    overwrite.
:[range]alink[!] path - creates absolute symbolic links of files in directory
    specified with the path (absolute or relative to directory of other
    view).
:[range]alink[!] name1 name2... - creates absolute symbolic links of files in
    directory of other view giving each next link a corresponding name from
    the argument list.

                                               *vifm-:apropos*
:apropos manpage - will create a menu of items returned by the apropos
    command.  Selecting an item in the menu will open the corresponding
    manpage.  By default the command relies on the external "apropos"
    utility, which can be customized by altering value of the
    |vifm-'aproposprg'| option.
:apropos - repeats last :apropos command.

                                               *vifm-:cd*
:cd or :cd ~ or :cd $HOME - change to your home directory.
:cd - - go to previous directory.
:cd ~/dir - change directory to ~/dir.
:cd /curr/dir /other/dir - change directory of the current pane to /curr/dir
    and directory of the other pane to /other/dir.  When using relative paths
    vifm assumes that both of them are relative to current directory of current
    view.  Command will not fail if one of directories is invalid.
    Accepts macros.
:cd! /dir - same as :cd /dir /dir.

                                               *vifm-:change* *vifm-:c*
:c[hange] - create a menu window to alter a files properties.

                                               *vifm-:chmod*
:[range]chmod - shows file attributes (permission on *nix and properties on
    Windows) change dialog.
                                               {only for *nix}
:[range]chmod[!] arg... - changes permissions for files.  See 'man chmod'
    for arg format.  "!" means set permissions recursively.

                                               *vifm-:chown*
                                               {only for *nix}
:[range]chown - same as co key in normal mode.
:[range]chown [user][:][group] - changes owner and/or group of files.
    Operates on directories recursively.

                                               *vifm-:clone*
:[range]clone[!?] - clones files in current directory.  With "?" vifm will
    open vi to edit filenames.  "!" forces overwrite.  Macros are expanded.
:[range]clone[!] path - clones files to directory specified with the path
    (absolute or relative to current directory).  Macros are expanded.
:[range]clone[!] name1 name2... - clones files in current directory giving
    each next clone a corresponding name from the argument list.  Macros
    are expanded.

                                               *vifm-:colorscheme* *vifm-:colo*
:colo[rscheme]? - prints current color scheme name in the status bar.
:colo[rscheme] - gives a menu with a list of available color schemes.  You
    can choose default color scheme here.  It will be used for view if no
    DIRECTORY in colorscheme file fits current path.  It's also used to
    set border color (except view titles) and colors in the menus and
    dialogs.
:colo[rscheme] color_scheme_name - changes default color scheme to
    color_scheme_name.
:colo[rscheme] color_scheme_name directory - associates directory with the
    color scheme.  The directory argument can be both absolute or relative
    path when :colorscheme command is executed from command line, but
    mandatory should be an absolute path when the command is executed in
    scripts loaded at startup (until vifm is completely loaded).

                                               *vifm-:comclear* *vifm-:comc*
:comc[lear] - removes all user defined commands.

                                               *vifm-:command* *vifm-:com*
:com[mand] - gives a menu of user commands.
:com[mand] beginning - shows user defined commands that start with the
    beginning.
:com[mand] name action - sets a new user command.
    Trying to use a reserved command name will result in an error message
    Use :com[mand]! to overwrite a previously set command.
    Unlike vim user commands do not have to start with a capital letter.
    User commands are run in a shell by default.  To run a command in
    the background you must set it as a background command with & at the end
    of the commands action (:com rm rm %f &).  Command name cannot contain
    numbers or special symbols (except '?' and '!').
:com[mand] name /pattern - will set search pattern.
:com[mand] name filter pattern - will set file name filter.
:com[mand] cmd :commands - will set kind of alias for internal command (like
    in a shell).  Will pass range given to alias to an aliased command, so
    running :%cp after >
      :command cp :copy %a
<   equals >
      :%copy
<
                                               *vifm-:copy*  *vifm-:co*
:[range]co[py][!?][ &] - copies files to directory of other view.  With
    "?" vifm will open vi to edit filenames.  "!" forces overwrite.
:[range]co[py][!] path[ &] - copies files to directory specified with the
    path (absolute or relative to directory of other view).  "!" forces
    overwrite.
:[range]co[py][!] name1 name2...[ &] - copies files to directory of other
    view giving each next file a corresponding name from the argument list.
    "!" forces overwrite.

                                               *vifm-:delete* *vifm-:d*
:[range]d[elete][!][count][ &] - delete selected file or files.  "!" means
    completely remove file.
:[range]d[elete][!][reg] [count][ &] - will delete files to the reg register.
    "!" means completely remove file.

                                               *vifm-:delcommand* *vifm-:delc*
:delc[ommand] user_command - remove user_command.

                                               *vifm-:delmarks* *vifm-:delm*
:delm[arks]! - will delete all marks.
:delm[arks] marks ... - will delete specified marks, each argument is
    treated as a set of marks.

                                               *vifm-:display* *vifm-:di*
:di[splay] - popup menu with registers content.
:di[splay] list - display the contents of the numbered and named registers
    that are mentioned in list (for example "az to display "", "a and "z
    content).

                                               *vifm-:dirs*
:dirs - display directory stack.

                                               *vifm-:echo* *vifm-:ec*
:ec[ho] [<expr>...] - evaluates each argument as an expression and outputs
    them separated by a space.  See |vifm-:let| for definition of <expr>.

                                               *vifm-:edit* *vifm-:e*
:[range]e[dit] [file...] - will load the selected or passed file or files
    into vi.  Accepts macros.

                                               *vifm-:else* *vifm-:el*
:el[se] - executes commands until next matching |vifm-:endif| if they
    previously were not being executed.  See also |vifm-:if| and
    |vifm-commands-and-selection|.

                                               *vifm-:empty*
:empty - permanently remove files from |vifm-trash| directory.  It will also
    remove all operations from undolist that have no sense after :empty and
    remove all records about files in |vifm-trash| directory from all registers.

                                               *vifm-:endif* *vifm-:en*
:en[dif] - ends conditional block.  See also |vifm-:if| and |vifm-:else|.

                                               *vifm-:execute* *vifm-:exe*
:exe[cute] [<expr>...] - evaluates each argument as an expression and joins
    results separated by a space to get a single string which is then executed
    as a command-line command.  See |vifm-:let| for definition of <expr>.

                                               *vifm-:exit* *vifm-:exi*
:exi[t][!] - same as :quit.

                                               *vifm-:file* *vifm-:f*
:f[ile] - popup menu of programs set for the file type of the current file.
    Add ' &' in the end of command if you want to start program in
    background.
:f[ile] arg - run associated command that begins with the arg without
    opening menu.

                                               *vifm-:filetype* *vifm-:filet*
:filet[ype] pat1,pat2,... [{ descr }]def_program[ &],[{ descr }]prog2[ &],...
    will associate given program list to each of the patterns.  Associated
    program (command) is used by handlers of l and Enter keys (and also in
    the :file menu).  If you need to insert comma into command just double
    it (",,").  Space followed by an ampersand as two last characters of
    a command means running of the command in the background.  Optional
    description can be given to each command to ease understanding of what
    command will do in the :file menu.  Vifm will try the rest of the
    programs for an association when the default isn't found.  When program
    entry doesn't contain any of vifm macros, name of current file is
    appended as if program entry ended with %c macro.  On Windows path to
    executables containing spaces can (and should be for correct work with
    such paths) be double quoted.  See |vifm-globs| for pattern definition.
    See also |vifm-fuse|.  Example for zip archives and several actions: >

    filetype *.zip,*.jar,*.war,*.ear
           \ {Mount with fuse-zip}
           \ FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR,
           \ {View contents}
           \ zip -sf %c | less,
           \ {Extract here}
           \ tar -xf %c,
<
                                               *vifm-:filextype* *vifm-:filex*
:filex[type] pat1,pat2,... [{ description }] def_program,program2,... - same
    as :filetype, but vifm will ignore this command if it's not running in X.
    In X :filextype is equal to :filetype.  See |vifm-globs| for pattern
    definition.  See also |vifm-fuse|.

                                               *vifm-:fileviewer* *vifm-:filev*
:filev[iewer] pat1,pat2,... command - will associate given command as a
    viewer to each of the patterns.  Viewer is a command which output is
    captured and showed in the second pane of vifm after running :view
    command.  When the command doesn't contain any of vifm macros, name of
    current file is appended as if command ended with %c macro.  See
    |vifm-globs| for pattern definition.  Example for zip archives: >

    fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c
<
                                               *vifm-:filter*
:filter[!] regular_expression
:filter[!] /regular_expression/ - will filter files matching the pattern
    out of directory listing.  Use :filter to show all files.  Using second
    variant you can use the bar ('|') symbol without escaping.  Empty
    regular expression (specified by //, "" or '') means using of the last
    search pattern.  Use '!' to control state of filter inversion after
    updating filter value (see |vifm-cpo-f|).  Filter is matched case
    sensitively on *nix and case insensitively on Windows.
    See |vifm-filters|.
:filter - reset filter (set it to empty string) and show all files.
:filter! - same as :invert.
:filter? - show current value of name and auto filters.

                                               *vifm-:find* *vifm-:fin*
:[range]fin[d] pattern - will show results of find command in the menu.
    Searches among selected files if any and no range given.
    Accepts macros.  By default the command relies on the external "find"
    utility, which can be customized by altering value of the
    |vifm-'findprg'| option.
:[range]fin[d] -opt... - same as :find above, but user defines all find
    arguments.  Searches among selected files if any and no range given.
:[range]fin[d] path -opt... - same as :find above, but user defines all
    find arguments.  Ignores selection and range.
:[range]fin[d] - repeats last :find command.

                                               *vifm-:finish* *vifm-:fini*
:fini[sh] - stop sourcing a script. Can only be used in a vifm script
    file. This is a quick way to skip the rest of the file.

                                               *vifm-:grep* *vifm-:gr*
:[range]gr[ep][!] pattern - will show results of grep command in the menu.
    Add "!" to request inversion of search (look for lines that do not
    match pattern).  Searches among selected files if any and no range
    given.  Ignores binary files by default.  By default the command
    relies on the external "grep" utility, which can be customized by
    altering value of the |vifm-'grepprg'| option.
:[range]gr[ep][!] -opt... - same as :grep above, but user defines all find
    arguments, which are not escaped.  Searches among selected files if
    any.
:[range]gr[ep][!] - repeats last :grep command.  "!" of this command
    inverts "!" in repeated command.

                                               *vifm-:help* *vifm-:h*
:h[elp] - show the help file.
:h[elp] argument - is the same as using ':h argument' in vim.  Use
    vifm-<something> to get help on vifm (tab completion works).  This
    form of the command doesn't work when |vifm-'vimhelp'| option is off.

                                               *vifm-:highlight* *vifm-:hi*
:hi[ghlight] - will show information about all highlight groups in the
    current directory.
:hi[ghlight] group-name - will show information on given highlight
    group of the default color scheme.
:hi[ghlight] group-name cterm=style | ctermfg=color | ctermbg=color - sets
    style (cterm), foreground (ctermfg) or/and background (ctermbg)
    parameters of highlight group of the current default color scheme.

Available style values (some of them can be combined):
 - bold
 - underline
 - reverse or inverse
 - standout
 - none

Available group-name values:
 - Win - color of all windows (views, dialogs, menus)
 - Border - color of vertical parts of the border
 - TopLineSel - top line color of the current pane
 - TopLine - top line color of the other pane
 - CmdLine - the command line/status bar color
 - ErrorMsg - color of error messages in the status bar
 - StatusLine - color of the line above the status bar
 - WildMenu - color of the wild menu items
 - CurrLine - line at cursor position in the view
 - Selected - color of selected files
 - Directory - color of directories
 - Link - color of symbolic links in the views
 - BrokenLink - color of broken symbolic links
 - Socket - color of sockets
 - Device - color of block and character devices
 - Executable - color of executable files
 - Fifo - color of fifo pipes

Available colors:
 - -1 or default or none - transparent
 - black   and lightblack
 - red     and lightred
 - green   and lightgreen
 - yellow  and lightyellow
 - blue    and lightblue
 - magenta and lightmagenta
 - cyan    and lightcyan
 - white   and lightwhite

Light versions of colors are regular colors with bold attribute set.  So order
of arguments of :highlight command is important and it's better to put "cterm"
in front of others to prevent it from overwriting attributes set by "ctermfg" or
"ctermbg" arguments.

Since there are two colors and only one bold attribute it affects both colors
when "reverse" attribute is used when running vifm in terminal emulator.  While
linux native console can handle boldness of foreground and background colors
independently, which is for consistency with terminal emulators accessible from
vifm only implicitly by using light versions of colors.

Here is the hierarchy of highlight groups, which you need to know for using
transparency:
  StatusLine
    WildMenu
  Border
  CmdLine
    ErrorMsg
  Win
    Directory
    Link
    BrokenLink
    Socket
    Device
    Fifo
    Executable
      Selected
        CurrLine
  TopLine
    TopLineSel

"none" means default terminal color for highlight groups at the first level
of the hierarchy and transparency for all others.

                                               *vifm-:history* *vifm-:his*
:his[tory] - show directory history.
:his[tory] x
    x can be:
      d[ir]     or .  show directory history.
      c[md]     or :  show command line history.
      s[earch]  or /  show search history and search forward on l key.
      f[search] or /  show search history and search forward on l key.
      b[search] or ?  show search history and search backward on l key.
      i[nput]   or @  show prompt history (e.g. on one file renaming).
      fi[lter]  or =  show filter history (see |vifm-=|).

                                               *vifm-:if*
:if {expr1} - starts conditional block.  Commands are executed until next
    matching |vifm-:else| or |vifm-:endif| command if {expr1} evaluates to
    non-zero, otherwise they are ignored.  See
    also |vifm-commands-and-selection|.

                                               *vifm-:invert*
:invert [f] - invert file name filter.
:invert? [f] - show current filter state.
:invert s - invert selection.  See also |vifm-commands-and-selection|.
:invert o - invert sorting order of the primary sorting key.
:invert? o - show sorting order of the primary sorting key.



                                               *vifm-:jobs*
:jobs - shows menu of current backgrounded processes.

                                               *vifm-:let*
:let $ENV_VAR = <expr> - sets environment variable.  Warning: setting
    environment variable to an empty string on Windows removes it.
:let $ENV_VAR .= <expr> - append value to environment variable.

Where <expr> could be a single-quoted string, double-quoted string, an
environment variable, function call or a concatanation of any of them in any
order using the '.' operator.  Any whitespace is ignored.

                                               *vifm-:locate*
:locate filename - uses the locate command to create a menu of filenames
    Selecting a file from the menu will reload the current file list in vifm
    to show the selected file.  By default the command relies on the
    external "locate" utility (it's assumed that its database is already
    built), which can be customized by altering value of the
    |vifm-'locateprg'| option.
:locate - repeats last :locate command.

                                               *vifm-:mark* *vifm-:ma*
:[range]ma[rk][?] x /full/path [filename] - set mark x (a-zA-Z0-9) at
    /full/path and filename.  By default current directory is used.  If
    no filename was given and /full/path is current directory then last
    file in [range] is being used.  Using of macros is allowed.  Question
    mark will stop command from overwriting existing marks.

                                               *vifm-:marks*
:marks - menu of bookmarks.
:marks list ... - display the contents of the marks that are mentioned in list.

                                               *vifm-:messages* *vifm-:mes*
:mes[sages] - shows previously given messages (up to 50).

                                               *vifm-:mkdir*
:mkdir[!] dir... - creates directories with given names.  "!" means make
    parent directories as needed.  Macros are expanded.

                                               *vifm-:move* *vifm-:m*
:[range]m[ove][!?][ &] - moves files to directory of other view.  With "?"
    vifm will open vi to edit filenames.  "!" forces overwrite.
:[range]m[ove][!] path[ &] - moves files to directory specified with the path
    (absolute or relative to directory of other view).  "!" forces overwrite.
:[range]m[ove][!] name1 name2...[ &] - moves files to directory of other view
    giving each next file a corresponding name from the argument list.  "!"
    forces overwrite.

                                               *vifm-:nohlsearch* *vifm-:noh*
:noh[lsearch] - clear selection in current pane.

                                               *vifm-:normal* *vifm-:norm*
:norm[al][!] commands - executes normal mode commands.  If "!" is used,
    mappings will not be used.  If the last command is unfinished it will be
    aborted as if <esc> or <c-c> was typed.  A ":" should be completed as
    well.  Commands can't start with a space, so put a count of 1 (one)
    before it.

                                               *vifm-:only* *vifm-:on*
:on[ly] - switch to a one window view.

                                               *vifm-:popd*
:popd - remove pane directories from stack.

                                               *vifm-:pushd*
:pushd[!] /curr/dir [/other/dir] - add pane directories to stack and process
    arguments like :cd command.
:pushd - exchanges the top two items of the directory stack.

                                               *vifm-:pwd* *vifm-:pw*
:pw[d] - show the present working directory.

                                               *vifm-:quit* *vifm-:q*
:q[uit][!] - will exit vifm (add ! if you don't want to save changes or
    check if there are any of backgrounded commands still running).

                                               *vifm-:ls*
:ls - lists windows of active terminal multiplexer (only when terminal
    multiplexer is used).  This is achieved by issuing proper command for
    active terminal multiplexer, thus the list is not handled by vifm.

                                               *vifm-:lstrash*

:lstrash - displays a menu with list of files in trash.  Each element of
    the list is original path of a deleted file, thus the list can contain
    duplicates.

                                               *vifm-:registers* *vifm-:reg*
:reg[isters] - popup menu with registers content.
:reg[isters] list - display the contents of the numbered and named
    registers that are mentioned in list (for example "az to display "",
    "a and "z content).

                                               *vifm-:rename*
:[range]rename[!] - rename files using vi to edit names. ! means go
    recursively through directories.
:[range]rename name1 name2... - rename each of selected files to a
    corresponding name.

                                               *vifm-:restart*
:restart - will free a lot of things (histories, commands, etc.), reread
    vifminfo and vifmrc files and run startup commands passed in the
    argument list, thus losing all unsaved changes (e.g. recent history or
    keys mapped in current session).

                                               *vifm-:restore*
:[range]restore - will restore file from |vifm-trash| directory, doesn't work
    in any other directory.

                                               *vifm-:rlink*
:[range]rlink[!?] - creates relative symbolic links of files in directory of
    other view.  With "?" vifm will open vi to edit filenames.  "!" forces
    overwrite.
:[range]rlink[!] path - creates relative symbolic links of files in directory
    specified with the path (absolute or relative to directory of other
    view).  "!" forces overwrite.
:[range]rlink[!] name1 name2... - creates relative symbolic links of files in
    directory of other view giving each next link a corresponding name from
    the argument list.  "!" forces overwrite.

                                               *vifm-:screen*
:screen - toggles whether to use the terminal multiplexer or not.
    A terminal multiplexer uses pseudo terminals to allow multiple windows
    to be used in the console or in a single xterm.  Starting vifm from
    terminal multiplexer with appropriate support turned on will cause vifm
    to open a new terminal multiplexer window for each new file edited or
    program launched from vifm.  This requires screen version 3.9.9 or newer
    for the screen -X argument or tmux (version or newer 1.8 is recommented).
:screen? - shows whether integration with terminal multiplexers is enabled.

Note: the command is called screen for historical reasons (when tmux wasn't
yet supported) and might be changed in future releases, or get an alias.

                                               *vifm-:set* *vifm-:se*
:se[t] - shows all options that differ from their default value.
:se[t] all - shows all options.
:se[t] opt1=val1 opt2='val2' opt3="val3" ... - sets given options.
    You can use following syntax:
     - for all options - option, option? and option&
     - for boolean options - nooption, invoption and option!
     - for integer options - option=x, option+=x and option-=x
     - for string options - option=x
     - for string list options - option=x, option+=x and option-=x
     - for enumeration options - option=x, option+=x and option-=x
     - for enumeration options - option=x
     - for set options - option=x, option+=x and option-=x
     - for charset options - option=x, option+=x and option-=x
    the meaning:
     - option - turn option on (for boolean) or print its value (for all
         others)
     - nooption - turn option off
     - invoption - invert option state
     - option! - invert option state
     - option? - print option value
     - option& - reset option to its default value
     - option=x or option:x - set option to x
     - option+=x - add x to option
     - option-=x - remove (or subtract) x from option

    Option name can be prepended and appended by any number of whitespace
    characters.

                                               *vifm-:shell* *vifm-:sh*
:sh[ell] - will start a shell.

                                               *vifm-:sort* *vifm-:sor*
:sor[t] - menu of different sorting methods, when one can select primary
sorting key.  When |vifm-'viewcolumns'| options is empty and |vifm-'lsview'|
is off, changing primary sorting key will also affect view look (in
particular the second column of the view will be changed).

                                               *vifm-:source* *vifm-:so*
:so[urce] file - reads command-line commands from the file.

                                               *vifm-:split* *vifm-:sp*
:sp[lit] - switch to a two window horizontal view.
:sp[lit]! - toggles window horizontal splitting.
:sp[lit] path - splits the window horizontally to show both file
    directories.  And changes other pane to path (absolute or relative to
    current directory of active pane).

                                               *vifm-:substitute* *vifm-:s*
:[range]s[ubstitute]/pattern/string/[flags] - for each file in range
    replace a match of pattern with string.  String can contain \0...\9
    to link to capture groups (0 - all match, 1 - first group, etc.).
    Flags can be used
        i - ignore case (the |vifm-'ignorecase'| and |vifm-'smartcase'|
            options are not used)
        I - don't ignore case (the |vifm-'ignorecase'| and
            |vifm-'smartcase'| options are not used)
        g - substitute all matches in each file name (each g toggles this)
:[range]s[ubstitute]//string/[flags] - will use previous pattern.
:[range]s[ubstitute] - will repeat previous substitution command.

                                               *vifm-:touch*
:touch file... - will create files.  Aborts on errors and won't update
    time of existing files.  Macros are expanded.

                                               *vifm-:tr*
:[range]tr/pattern/string/ - for each file in range transliterate the
    characters which appear in pattern to the corresponding character in
    string.  When string is shorter than pattern, it's padded with its
    last character.

                                               *vifm-:trashes*
:trashes - lists all valid trash directories in a menu.  Only non-empty and
    writable trash directories are shown.  This is exactly the list of
    directories that are cleared when |vifm-:empty| command is executed.

                                               *vifm-:sync*
:sync [relative path] - change the other panel to the current panel
    directory or to some path relative to the current directory.  Using
    macros is allowed.
:sync! - change the other panel to the current panel directory and
    synchronize cursor position.

                                               *vifm-:undolist* *vifm-:undol*
:undol[ist] - show list of latest changes.  Add ! to see commands.

                                               *vifm-:unlet* *vifm-:unl*
:unl[et][!] $ENV_VAR1 $ENV_VAR2 ... - remove environment variables.  Add
    ! to omit displaying of warnings about nonexistent variables.

                                               *vifm-:version* *vifm-:ve*
:ve[rsion] - show menu with version information.

                                               *vifm-:vifm*
:vifm - same as :version.

                                               *vifm-:view* *vifm-:vie*
:vie[w] - toggle on and off the quick file view.
:vie[w]! - turns on quick file view if it's off.

                                               *vifm-:volume*
                                               {only for MS-Windows}
:volumes - will popup menu with volume list.  Hitting l (or Enter) key will
    open appropriate volume in the current pane.

                                               *vifm-:vsplit* *vifm-:vs*
:vs[plit] - switch to a two window vertical view.
:vs[plit]! - toggles window vertical splitting.
:vs[plit] path - splits the window vertically to show both file
    directories.  And changes other pane to path (absolute or relative to
    current directory of active pane).

                                               *vifm-:windo*
:windo [command...]
Execute command for each pane (same as :winrun % command).

                                               *vifm-:winrun*
:winrun type [command...]
Execute command for pane(s), which is determined by type argument:
 - ^ - top-left pane
 - $ - bottom-right pane
 - % - all panes
 - . - current pane
 - , - other pane

                                               *vifm-:write* *vifm-:w*
:w[rite] - will write vifminfo (add ! to force write even if settings
    weren't changed).

                                               *vifm-:wq*
:wq[!] - same as :quit, but ! disables only check of backgrounded commands.

                                               *vifm-:xit* *vifm-:x*
:x[it][!] - exit vifm (add ! if you don't want to save changes).

                                               *vifm-:yank* *vifm-:y*
:[range]y[ank] [reg] [count] - will yank files to the reg register.

                                               *vifm-:map*
:map lhs rhs - map lhs key sequence to rhs in normal and visual modes.
:map! lhs rhs - map lhs key sequence to rhs in command line mode.

                                               *vifm-:cmap* *vifm-:cm*
                                               *vifm-:mmap* *vifm-:mm*
                                               *vifm-:nmap* *vifm-:nm*
                                               *vifm-:qmap* *vifm-:qm*
                                               *vifm-:vmap* *vifm-:vm*
:cm[ap] lhs rhs - map lhs to rhs in command line mode.
:mm[ap] lhs rhs - map lhs to rhs in menu mode.
:nm[ap] lhs rhs - map lhs to rhs in normal mode.
:qm[ap] lhs rhs - map lhs to rhs in view mode.
:vm[ap] lhs rhs - map lhs to rhs in visual mode.

:cm[ap] - lists all maps in command line mode.
:mm[ap] - lists all maps in menu mode.
:nm[ap] - lists all maps in normal mode.
:qm[ap] - lists all maps in view mode.
:vm[ap] - lists all maps in visual mode.

:cm[ap] beginning - lists all maps in command line mode that start with
    the beginning.
:mm[ap] beginning - lists all maps in menu mode that start with the
    beginning.
:nm[ap] beginning - lists all maps in normal mode that start with the
    beginning.
:qm[ap] beginning - lists all maps in view mode that start with the
    beginning.
:vm[ap] beginning - lists all maps in visual mode that start with the
    beginning.

                                               *vifm-:noremap* *vifm-:no*
:no[remap] lhs rhs - map the key sequence lhs to {rhs} for normal and
    visual modes, but disallow mapping of rhs.
:no[remap]! lhs rhs - map the key sequence lhs to {rhs} for command line
    mode, but disallow mapping of rhs.

                                               *vifm-:cnoremap* *vifm-:cno*
                                               *vifm-:mnoremap* *vifm-:mn*
                                               *vifm-:nnoremap* *vifm-:nn*
                                               *vifm-:qnoremap* *vifm-:qn*
                                               *vifm-:vnoremap* *vifm-:vn*
:cno[remap] lhs rhs - map the key sequence lhs to {rhs} for command line
    mode, but disallow mapping of rhs.
:mn[oremap] lhs rhs - map the key sequence lhs to {rhs} for menu mode,
    but disallow mapping of rhs.
:nn[oremap] lhs rhs - map the key sequence lhs to {rhs} for normal mode,
    but disallow mapping of rhs.
:qn[oremap] lhs rhs - map the key sequence lhs to {rhs} for view mode,
    but disallow mapping of rhs.
:vn[oremap] lhs rhs - map the key sequence lhs to {rhs} for visual mode,
    but disallow mapping of rhs.

                                               *vifm-:unmap* *vifm-:unm*
:unm[ap] lhs - remove the mapping of lhs from normal and visual modes.
:unm[ap]! lhs - remove the mapping of lhs from command line mode.

                                               *vifm-:cunmap* *vifm-:cu*
                                               *vifm-:munmap* *vifm-:mu*
                                               *vifm-:nunmap* *vifm-:nun*
                                               *vifm-:qunmap* *vifm-:qun*
                                               *vifm-:vunmap* *vifm-:vu*
:cu[nmap] lhs - remove the mapping of lhs from command line mode.
:mu[nmap] lhs - remove the mapping of lhs from menu mode.
:nun[map] lhs - remove the mapping of lhs from normal mode.
:qun[map] lhs - remove the mapping of lhs from view mode.
:vu[nmap] lhs - remove the mapping of lhs from visual mode.

Ranges~
                                                               *vifm-ranges*
The ranges implemented include:
  2,3 - from second to third file in the list (including it)
  % - the entire directory.
  . - the current position in the filelist.
  $ - the end of the filelist.
  't - the mark position t.

Examples:
  :%delete would delete all files in the directory.
  :2,4delete would delete the files in the list positions 2 through 4.
  :.,$delete would delete the files from the current position to the end
    of the filelist.
  :3delete4 would delete the files in the list positions 3, 4, 5, 6.

If a backward range is given :4,2delete - an query message is given and
user can chose what to do next.

The builtin commands that accept a range are :d[elete] and :y[ank].

Command macros~
                                                               *vifm-macros*
The command macros may be used in user commands.
                                                               *vifm-%a*
  %a        user arguments.  When user arguments contain macros, they are
            expanded before preforming substitution of %a.
                                                               *vifm-%c*
  %c  %"c   the current file under the cursor.
                                                               *vifm-%C*
  %C  %"C   the current file under the cursor in the other directory.
                                                               *vifm-%f*
  %f  %"f   all of the selected files.
                                                               *vifm-%F*
  %F  %"F   all of the selected files in the other directory list.
                                                               *vifm-%b*
  %b  %"b   same as %f %F.
                                                               *vifm-%d*
  %d  %"d   full path to current directory.
                                                               *vifm-%D*
  %D  %"D   full path to other file list directory.
                                                               *vifm-%r*
  %rx %"rx  full paths to files in the register {x}.  In case of invalid
            symbol in place of {x}, it's processed with the rest of the
            line and default register is used.
                                                               *vifm-%m*
  %m        show command output in a menu.
                                                               *vifm-%M*
  %M        same as %m, but l (or Enter) key is handled like for :locate
            and :find commands.
                                                               *vifm-%S*
  %S        show command output in the status bar.
                                                               *vifm-%s*
  %s        execute command in split window of active terminal
            multiplexer (ignored if not running inside one).
                                                               *vifm-%i*
  %i        completely ignore command output.

Use %% if you need to put a percent sign in your command.

Note that %m, %M, %s, %S and %i macros are mutually exclusive.  Only the
last one of them in the command will take effect.

You can use filename modifiers after %c, %C, %f, %F, %b, %d and %D macros.
Supported modifiers are:
    :p           - full path
    :u           - UNC name of path (e.g. "\\server" in "\\server\share"),
                   Windows only.  Expands to current computer name for not
                   UNC paths.
    :~           - relative to the home directory
    :.           - relative to current directory
    :h           - head of the filename
    :t           - tail of the filename
    :r           - root of the filename (without last extension)
    :e           - extension of the filename (last one)
    :s?pat?sub?  - substitute the first occurrence of "pat" with "sub".  You
                   can use any character for '?', but it must not occur in pat
                   or sub
    :gs?pat?sub? - like :s, but substitutes all occurrences of "pat" with
                   "sub".
See |filename-modifiers| for the detailed description.

Using %x means expand corresponding macro escaping all characters that have
special meaning.  And %"x means using of double quotes and escape only backslash
and double quote characters, which is more useful on Windows systems.

Position and quantity (if there is any) of %m, %M, %S or %s macros in the
command is unimportant.  All their occurrences will be removed from the
resulting command.

%c and %f macros are expanded to file names only, when %C and %F are expanded
to full paths.  %f and %F follow this in %b too.

:com move mv %f %D - would set the :move command to move all of the files
selected in the current directory to the other directory.

The %a macro will substitute any arguments given in a command into the
command.  All arguments are considered optional.
:com lsl !!ls -l %a - will set the lsl command to execute ls -l with or
without an argument.

:lsl<Return> will list the directory contents of the current directory.
:lsl filename<Return> will list only the given filename.

The macros can also be used in directly executing commands.
:!mv %f %D - would move the current directory selected files to the other
directory.

Appending & to the end of a command will cause it to be executed in the
background.  Typically you want to run two kinds of external commands in the
background:
 - GUI applications that doesn't fork thus block vifm (:!sxiv %f &);
 - console tools that do not work with terminal (:!mv %f %D &).
You don't want to run terminal commands, which require terminal input or
output something because they will mess up vifm's TUI. Anyway, if you did run
such a command, you can use Ctrl-L key to update vifm's TUI.

Rewriting the example command with macros given above with backgrounding:
>
 :!mv %f %D &
<
Note that %m, %M, %s, %S and %i macros have bigger priority than &.  So
command containing at least one of them can't be backgrounded and " &" at the
end will be just silently ignored.

--------------------------------------------------------------------------------
*vifm-commands-bg*

Copy and move operation can take a lot of time to proceed.  That's why vifm
supports backgrounding of this two operations.  To run :copy, :move or :delete
command in the background just add " &" at the end of a command.

For each background operation a new thread will be created.  Currently job
cannot be stopped or paused.

You can see if command is still running in the :jobs menu.  Backgrounded
commands have progress instead of process id at the line beginning.

Background operations cannot be undone.

--------------------------------------------------------------------------------
*vifm-cancellation*

Note that cancellation works somewhat different on Windows platform due to
different mechanism of break signal propagation.  One also might need to use
Ctrl-Break shortcut instead of Ctrl-C.

There are two types of operations that can be cancelled:
 - file system operations;
 - calls of external applications.

Note that vifm never terminates applications, it sends SIGINT signal and lets
the application quit normally.

When one of set of operations is cancelled (e.g. copying of 5th file of 10
files), further operations are cancelled too.  In this case undo history will
contain only actually performed operations.

Cancelled operations are indicated by "(cancelled)" suffix appended to
information message on statusbar.

File system operations~

Currently the following commands can be cancelled: |vifm-:alink|, |vifm-:chmod|,
|vifm-:chown|, |vifm-:clone|, |vifm-:copy|, |vifm-:delete|, |vifm-:mkdir|, |vifm-:move|,
|vifm-:restore|, |vifm-:rlink|, |vifm-:touch|.  File putting (|vifm-p|, |vifm-P|) can
be cancelled as well.  It's not hard to see that these are mainly
long-running operations.

Cancelling commands when they are repeated for undo/redo operations is allowed
for convenience, but is not recommended as further undo/redo operations might
get blocked by side-effects of partially cancelled group of operations.

These commands can't be cancelled: |vifm-:empty|, |vifm-:rename|,
|vifm-:substitute|, |vifm-:tr|.

External application calls~

Each of this operations can be cancelled: |vifm-:apropos|, |vifm-:find|,
|vifm-:grep|, |vifm-:locate|.

--------------------------------------------------------------------------------
*vifm-globs*

|vifm-:filetype|, |vifm-:filextype| and |vifm-:fileviewer| commands support globs
to match file names.  Here is a short overview of globs and some important
points that one needs to know about them.

Only names of files are matched by the globs, not full paths.  E.g. >
 :filetype Makefile make %c
will match files with name "Makefile" regardless whether it's in root or home
directory.

*, ?, [ and ] are treated as special symbols in the pattern.  E.g. >
 :filetype * less %c
matches all files.  One can use character classes for escaping, so >
 :filetype [*] less %c
matches only one file name, the one which contains only asterisk symbol.

* means any number of any characters (possibly an empty substring), with one
exception: asterisk at the pattern beginning doesn't match dot in the first
position.  E.g. >
 :fileviewer *.zip,*.jar zip -sf %c
associates using of zip program to preview all files with zip or jar
extensions as listing of their content.

? means any character at this position.  E.g. >
 :fileviewer ?.out file %c
calls file tool for all files which has exactly one character before their
extension (e.g. a.out, b.out).

Square brackets designate character class, which means that whole character
class matches against any of characters listed in it.  For example >
 :fileviewer *.[ch] highlight -O xterm256 -s dante --syntax c %c
makes vifm call highlight program to colorize source and header files in C
language for a 256-color terminal.  Equal command would be >
 :fileviewer *.c,*.h highlight -O xterm256 -s dante --syntax c %c

Inside square brackets ^ or ! can be used for symbol class negotiation and
the - symbol to set a range. ^ and ! should appear right after the opening
square bracket.  For example >
 :filetype *.[!d]/ inspect_dir
associates inspect_dir as additional handler for all directories that have one
character extension unless it's "d" letter.  And >
 :filetype [0-9].jpg sxiv
associates sxiv picture viewer only for JPEG-files that contain single digit
in their name.

--------------------------------------------------------------------------------
*vifm-set-options*

                                               *vifm-local-options*
These are kind of options that are local to a specific view. So you can set
ascending sorting order for left pane and descending order for right pane.

                                               *vifm-'aproposprg'*
aproposprg
type: string
default: "apropos %a"
Specifies format for an external command to be invoked by the |vifm-:apropos|
command.  The format supports expanding of macros, specific for a particular
*prg option, and %% sequence for inserting percent sign literally.  This
option should include the %a macro to specify placement of arguments passed
to the |vifm-:apropos| command.  If the macro is not used, it will be
implicitly added after a space to the value of this option.

                                               *vifm-'autochpos'*
autochpos
type: boolean
default: true
When disabled vifm will set cursor to the first line in the view after :cd and
:pushd commands instead of saved cursor position.  Disabling this will also
make vifm clear information about cursor position in the view history on :cd
and :pushd commands (and on startup if 'autochpos' is disabled in the vifmrc).
l key in the ":history ." and ":trashes" menus is treated like :cd command.
This option also affects bookmarks so that navigating to a bookmark doesn't
restore cursor position.

                                               *vifm-'classify'*
classify
type: string list
default: ":dir:/"
Specifies file name prefixes and suffixes depending on file types.  The format
is: [{prefix}]:{filetype}:[{suffix}].  Either {prefix} or {suffix} or both of
them can be omitted (which is the default for all unspecified file types),
this means empty {prefix} and/or {suffix}.  {prefix} and {suffix} should
consist exactly of one character. Elements are separated by commas.  Neither
prefixes nor suffixes are part of file names, so they don't affect commands
which operate on file names in any way. Comma (',') character should not be
used.  List of file type names can be found in the description of
|vifm-filetype()| function.

                                               *vifm-'columns'* *vifm-'co'*
columns co
type: int
default: terminal width on startup
Terminal width in characters.

                                               *vifm-'confirm'* *vifm-'cf'*
confirm cf
type: boolean
default: true
Ask about permanent deletion of files (on D or :delete! command or on
undo/redo operation).

                                               *vifm-'cpoptions'* *vifm-'cpo'*
cpoptions cpo
type: charset
default: "fst"
Contains a sequence of single-character flags.  Each flag enables behaviour of
older versions of vifm.  Flags:
                                               *vifm-cpo-f*
f - when included, running |vifm-:filter| command results in not inverted
    (matching files are filtered out) and :filter! in inverted (matching files
    are left) filter, when omitted, meaning of the exclamation mark changes to
    the opposite;
                                               *vifm-cpo-s*
s - when included, |vifm-yy|, |vifm-dd| and |vifm-DD| normal mode commands act on
    selection, otherwise they operate on current file only;
                                               *vifm-cpo-t*
t - when included, <tab> (thus <c-i>) behave as <space> and switch active
    pane, otherwise <c-i> goes forward in the view history.

                                               *vifm-'dotdirs'*
dotdirs
type: set
default: nonrootparent
Controls displaying of dot directories.  The following values are possible:
   rootparent    - show "../" in root directory of file system
   nonrootparent - show "../" in non-root directories of file system
Note that empty directories will always contain "../" entry regardless of value
of this option.  "../" will disappear at the moment at least one file is created
inside the directory.

                                               *vifm-'fastrun'*
fastrun
type: boolean
default: false
With this option turned on you can run partially entered commands with
unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

                                               *vifm-'findprg'*
findprg
type: string
default: "find %s %a -print , -type d \( ! -readable -o ! -executable \) -prune"
Specifies format for an external command to be invoked by the |vifm-:find|
command.  The format supports expanding of macros, specific for a particular
*prg option, and %% sequence for inserting percent sign literally.  This
option should include the %s macro to specify placement of list of paths to
search in and %a or %A macro to specify placement of arguments passed to the
|vifm-:find| command.  If some of the macros are not used, they will be
implicitly added after a space to the value of the option in the following
order: %s, %a.  Note that when neither %a nor %A are specified, it's %a which
is added implicitly.

The macros can slightly change their meaning depending on |vifm-:find| command
arguments.  When the first argument points to an existing directory, %s is
assigned all arguments and %a/%A are left empty.  Otherwise, %s is assigned
a dot (".") meaning current directory or list of selected filenames, if any.
%a/%A are assigned arguments when first argument starts with a dash ("-"),
otherwise %a gets an escaped version of arguments, prepended by "-name"
(on *nix) or "-iname" (on Windows) predicate.

%a and %A macros contain almost the same value, the difference is that %a can
be escaped and %A is never escaped.  %A is to be used mainly on Windows, where
shell escaping is a mess and can break command execution.

Starting from Windows Server 2003 a where command is available, one can
configure vifm to use it in the following way: >

    set findprg="where /R %s %A"
<
As the syntax of this command is rather limited, one can't use |vifm-:find|
command with selection of more than one item in this case.  The command looks
for files only completely ignoring directories.

When using find port on Windows, another option is to setup 'findprg' like
this: >
    set findprg="find %s %a"
<
                                               *vifm-'followlinks'*
followlinks
type: boolean
default: true
Follow links on l or Enter.

                                               *vifm-'fusehome'*
fusehome
type: string
default: "($TMPDIR | $TEMP | $TEMPDIR | $TMP)/vifm_FUSE/"
Directory to be used as a root dir for FUSE mounts.  Value of the option can
contain environment variables (in form "$envname"), which will be expanded
(prepend it with a slash to prevent expansion).  The value should expand to
an absolute path.

If you change this option, vifm won't remount anything.  It affects future
mounts only.  See |vifm-fuse| section for more information about FUSE mounts.

                                               *vifm-'gdefault'* |vifm-'gd'|
gdefault gd
type: boolean
When on, 'g' flag is on for |vifm-:substitute| by default.

                                               *vifm-'grepprg'*
grepprg
type: string
default: "grep -n -H -I -r %i %a %s"
Specifies format for an external command to be invoked by the |vifm-:grep|
command.  The format supports expanding of macros, specific for a particular
*prg option, and %% sequence for inserting percent sign literally.  This
option should include the %i macro to specify placement of "-v" string when
inversion of results is requested, the %a macro to specify placement of
arguments passed to the |vifm-:grep| command and the %s macro to specify
placement of list of files to search in.  If some of the macros are not
used, they will be implicitly added after a space to the value of the
|vifm-'grepprg'| option in the following order: %i, %a, %s.

Example of setup to use ack (http://beyondgrep.com/) instead of grep:
>
    set grepprg=ack\ -H\ -r\ %i\ %a\ %s
<
or The Silver Searcher (https://github.com/ggreer/the_silver_searcher):
>
    set grepprg=ag\ --line-numbers\ %i\ %a\ %s
<
                                               *vifm-'history'* *vifm-'hi'*
history hi
type: integer
default: 15
Maximum number of directories in the view history and lines in the prompt,
command line and search histories.

                                               *vifm-'hlsearch'* *vifm-'hls'*
hlsearch hls
type: bool
default: true
Highlight all matches of search pattern.

                                               *vifm-'iec'*
iec
type: boolean
default: false
Use KiB, MiB, ... instead of KB, MB, ...

                                               *vifm-'ignorecase'* *vifm-'ic'*
ignorecase ic
type: boolean
default: false
Ignore case in search patterns (:substitute, / and ? commands) and
characters after f and F commands.  It doesn't affect file filtering.

                                               *vifm-'incsearch'* *vifm-'is'*
incsearch is
type: boolean
default: false
When this option is set, search will be performed starting from initial
cursor position each time search pattern is changed.

                                               *vifm-'laststatus'* *vifm-'ls'*
laststatus ls
type: boolean
default: true
Controls if status bar is visible.

                                               *vifm-'lines'*
lines
type: int
default: terminal height on startup
Terminal height in lines.

                                               *vifm-'locateprg'*
locateprg
type: string
default: "locate %a"
Specifies format for an external command to be invoked by the |vifm-:locate|
command.  The format supports expanding of macros, specific for a particular
*prg option, and %% sequence for inserting percent sign literally.  This
option should include the %a macro to specify placement of arguments passed
to the |vifm-:locate| command.  If the macro is not used, it will be
implicitly added after a space to the value of this option.

                                               *vifm-'lsview'*
lsview
type: boolean
default: false
type: local
When this option is set, directory view will be displayed in multiple
columns with filenames similar to output of `ls -x` command.  See also
|vifm-ls-view|.

                                               *vifm-'rulerformat'* *vifm-'ruf'*
rulerformat ruf
type: string
default: "%=%l-%S "
Determines the content of the ruler.  Its width is 13 characters and it's
right aligned.  Following macros are supported:
    %l - file number
    %L - total number of files in view (including filtered)
    %- - number of filtered files
    %S - number of showed files
    %% - percent sign
Percent sign can be followed by optional minimum field width.  Add '-' before
minimum field width if you want field to be right aligned.
Example: >
 set rulerformat="%=%2l-%S [%L] "
<
                                               *vifm-'runexec'*
runexec
type: boolean
default: false
Run executable file on Enter or l.

                                               *vifm-'scrollbind'* *vifm-'scb'*
scrollbind scb
type: boolean
default: false
When this option is set, vifm will try to keep difference of scrolling
positions of two windows constant.

                                               *vifm-'scrolloff'* *vifm-'so'*
scrolloff so
type: int
default: 0
Minimal number of screen lines to keep above and below the cursor.  If you
want cursor line to always be in the middle of the view (except at the
beginning or end of the file list), set this option to some large value
(e.g. 999).

                                               *vifm-'shell'* *vifm-'sh'*
shell sh
type: string
default: $SHELL or "sh" or "cmd" (on MS-Windows)
Full path to the shell to use to run external commands.

                                               *vifm-'shortmess'* *vifm-'shm'*
shortmess shm
type: charset
default: ""
Contains a sequence of single-character flags.  Each flag enables shortening
of some message displayed by vifm in the TUI.  Flags:
T - truncate status-bar messages in the middle if they are too long to fit on
    the command line.  "..." will appear in the middle.

                                               *vifm-'slowfs'*
                                               {only for *nix}
slowfs
type: string list
default: ""
A list of mounter fs name beginnings (first column in /etc/mtab or
/proc/mounts) that work too slow for you.  This option can be used to
stop vifm from making some requests to particular kinds of file systems
that can slow down file browsing.  Currently this means don't check if
directory has changed and do not check if target of symbolic links exists.

                                               *vifm-'smartcase'* *vifm-'scs'*
smartcase scs
type: boolean
default: false
Overrides the |vifm-'ignorecase'| option if the search pattern contains at
least one upper case character.  Only used when |vifm-'ignorecase'| option
is enabled.  It doesn't affect file filtering.

                                               *vifm-'sort'*
sort
type: enumeration
default: +name on *nix and +iname on Windows
type: local
Sets list of sorting keys (first item is primary key, second is secondary
key, etc.):
   [+-]ext   - sort by extension
   [+-]name  - sort by name (including extension)
   [+-]iname - sort by name (including extension, ignores case)
   [+-]type  - sort by type (directory < file)
   [+-]gid   - sort by group id (*nix only)
   [+-]gname - sort by group name (*nix only)
   [+-]mode  - sort by mode (*nix only)
   [+-]perms - sort by permissions string (*nix only)
   [+-]uid   - sort by owner id (*nix only)
   [+-]uname - sort by owner name (*nix only)
   [+-]size  - sort by size
   [+-]atime - sort by time accessed
   [+-]ctime - sort by time changed
   [+-]mtime - sort by time modified

'+' means ascending sort for this key, and '-' means descending sort.

Value of the option is checked to include default sorting key (name on
*nix, iname on Windows).  When it is absent, the key is appended to the
value of the option.

Type key is somewhat similar in this regard but it's not added implicitly:
when "type" is not specified, sorting behaves as if it was the first key in
the list.  That's why if one wants sorting algorithm to mix directories and
files, "type" should be appended to sorting option, for example like this: >
 set sort+=type
or >
 set sort=-size,type

This option also changes view columns according to primary sorting key set,
unless |vifm-'viewcolumns'| option is not empty.

                                               *vifm-'sortnumbers'*
sortnumbers
type: boolean
default: false
Natural sort of (version) numbers within text.

                                               *vifm-'sortorder'*
sortorder
type: enumeration
default: ascending
type: local
Sets sort order for primary key: ascending, descending.

                                               *vifm-'statusline'* *vifm-'stl'*
statusline stl
type: string
default: ""
Determines the content of the status line (the line right above command-line).
Empty string means use same format like in previous versions.  Following macros
are supported:
    %t - file name (considering value of the 'classify' option)
    %A - file attributes (permissions on *nix or properties on Windows)
    %u - user name or uid (if it cannot be resolved)
    %g - group name or gid (if it cannot be resolved)
    %s - file size in human readable format
    %E - size of selected files in human readable format, same as %s when no
         files are selected, except that it will never show size of ../ in
         visual mode, since it cannot be selected
    %d - file modification date (uses |vifm-'timefmt'| option)
    all |vifm-'rulerformat'| macros
Percent sign can be followed by optional minimum field width.  Add '-' before
minimum field width if you want field to be right aligned.

On Windows file properties include next flags (upper case means flag is on):
    A - archive
    H - hidden
    I - content isn't indexed
    R - readonly
    S - system
    C - compressed
    D - directory
    E - encrypted
    P - reparse point (e.g. symbolic link)
    Z - sparse file

Example: >
 set statusline="  %t%= %A %10u:%-7g %15s %20d "
<
                                               *vifm-'tabstop'* *vifm-'ts'*
tabstop ts
type: integer
default: value from curses library
Number of spaces that a Tab in the file counts for.

                                               *vifm-'timefmt'*
timefmt
type: string
default: " %m/%d %H:%M"
Format of time in file list.  See man date or man strftime for details.

                                               *vifm-'trash'*
trash
type: boolean
default: true
Use |vifm-trash| directory.

                                               *vifm-'trashdir'*
trashdir
type: string
default: "$HOME/.vifm/Trash"
List of trash directory path specifications, separated with commas.
Each list item either defines an absolute path to |vifm-trash| directory
or a path relative to a mount point root, when list element starts with "%r/".
Value of the option can contain environment variables (in form "$envname"),
which will be expanded (prepend it with a slash to prevent expansion).
Environment variables are expanded when the option is set.

When new file gets cut (deleted) vifm traverses each element of the option in
the order of their appearance and uses first trash directory that it was able
to create or that is already writable.

Example of customization to get one trash directory per mount point: >
 set trashdir=%r/.vifm-Trash,$HOME/.vifm/Trash
<
Will attempt to create the directory if it does not exist.

                                               *vifm-'timeoutlen'* *vifm-'tm'*
timeoutlen tm
type: integer
default: 1000
The time in milliseconds that is waited for a mapped key in case of already
typed key sequence is ambiguous.

                                               *vifm-'undolevels'* *vifm-'ul'*
undolevels ul
type: integer
default: 100
Maximum number of changes that can be undone.

                                               *vifm-'vicmd'*
vicmd
type: string
default: "vim"
The actual command used to start vi.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.

                                               *vifm-'viewcolumns'*
viewcolumns
type: string
default: ""
type: local
Format string containing list of columns in the view. When this option is
empty view columns to show are chosen automatically using sorting keys
(see |vifm-'sort'|) as a base.  Value of this option is ignored if
|vifm-'lsview'| is set.  See |vifm-column-view| for format description.
An example of setting the options for both panes (note |vifm-windo|
command): >
    windo set viewcolumns=-{name}..,6{size},11{perms}
<
                                               *vifm-'vixcmd'*
vixcmd
type: string
default: value of vicmd
The command used to start vi when in X.  Ampersand sign at the end (regardless
whether it's preceded by space or not) means backgrounding of command.

                                               *vifm-'vifminfo'*
vifminfo
type: set
default: bookmarks
Controls what will be saved in the $VIFM/vifminfo file.
   options   - all options that can be set with the :set command
   filetypes - associated programs and viewers
   commands  - user defined commands (see :command description)
   bookmarks - bookmarks, except special ones like '< and '>
   tui       - state of the user interface (sorting, number of windows, quick
               view state, active view)
   dhistory  - directory history
   state     - file name and dot filters and terminal multiplexers integration
               state
   cs        - default color scheme
   savedirs  - save last visited directory (needs dhistory)
   chistory  - command line history
   shistory  - search history (/ and ? commands)
   phistory  - prompt history
   fhistory  - filter history (see |vifm-=|)
   dirstack  - directory stack overwrites previous stack, unless stack of
               current session is empty
   registers - registers content

                                               *vifm-'vimhelp'*
vimhelp
type: boolean
default: false
Use vim help format.

                                               *vifm-'wildmenu'* *vifm-'wmnu'*
wildmenu wmnu
type: boolean
default: false
Controls whether possible matches of completion will be shown above the
command line.

                                               *vifm-'wrap'*
wrap
type: boolean
default: true
Controls whether to wrap text in quick view.

                                               *vifm-'wrapscan'* *vifm-'ws'*
wrapscan ws
type: boolean
default: true
Searches wrap around end of the list.

--------------------------------------------------------------------------------
*vifm-mappings*

Since it's not easy to enter special characters there are several special
sequences that can be used in place of them.  They are:

<cr> - Enter key
<esc> - Escape key
<space> - Space key
<bs> - Backspace key
<tab> <s-tab> - Tabulation and Shift+Tabulation keys
<home> <end> - Home/End
<left> <right> <up> <down> - Arrow keys
<pageup> <pagedown> - PageUp/PageDown
<del> <delete> - Delete key.  <del> and <delete> mean different codes, but
    <delete> is more common.
<c-a>,<c-b>,...,<c-z>,<c-[>,<c-\>,<c-]>,<c-^>,<c-_> - Control + some key.
<a-a>,<a-b>,...,<a-z> - Alt + some key.
<m-a>,<m-b>,...,<m-z> - Alt + some key.
<a-c-a>,<a-c-b>,...,<a-c-z>                    {only for *nix}
Alt + Ctrl + some key.
<m-c-a>,<m-c-b>,...,<m-c-z>                    {only for *nix}
Alt + Ctrl + some key.
<f0> - <f63> - functional keys
<c-f1>,...,<c-f12>                             {only for MS-Windows}
functional keys with Control key pressed.
<a-f1>,...,<a-f12>                             {only for MS-Windows}
functional keys with Alt key pressed.
<s-f1>,...,<s-f12>                             {only for MS-Windows}
functional keys with Shift key pressed.

vifm removes whitespace characters at the beginning and end of commands.
That's why you may want to use <space> at the end of rhs in mappings.  For
example: >
 cmap <f1> man<space>
will put "man " in line when you hit the <f1> key in the command line mode.

--------------------------------------------------------------------------------
*vifm-expression-syntax*

Supported expressions is a subset of what VimL provides.

Expression syntax summary, from least to most significant:

|vifm-expr1| expr2 == expr2          equal
             expr2 != expr2          not equal
             expr2 >  expr2          greater than
             expr2 >= expr2          greater than or equal
             expr2 <  expr2          smaller than
             expr2 <= expr2          smaller than or equal

|vifm-expr2| expr3 . expr3 ..        string concatenation

|vifm-expr3| - expr3                 unary minus
             + expr3                 unary plus

|vifm-expr4| number                  number constant
             "string"                string constant, backslash is special
             'string'                string constant, ' is doubled
             &option                 option value
             $VAR                    environment variable
             function(expr1, ...)    function call

".." indicates that the operations in this level can be concatenated.

expr1                                          *vifm-expr1*
-----
expr2 {cmp} expr2

Compare two expr2 expressions, resulting in a 0 if it evaluates to false or 1
if it evaluates to true.

equal                   ==                     *vifm-expr-==*
not equal               !=                     *vifm-expr-!=*
greater than            >                      *vifm-expr->*
greater than or equal   >=                     *vifm-expr->=*
smaller than            <                      *vifm-expr-<*
smaller than or equal   <=                     *vifm-expr-<=*

Examples: >
  'a' ==  'a'         == 1
  'a' >   'b'         == 1
  'a' ==  'b'         == 0
  '2' >   'b'         == 0
   2  >   'b'         == 1
   2  >   '1b'        == 1
   2  >   '9b'        == 0
  -1  == -'1'         == 1
   0  ==  '--1'       == 1
<

expr2                                          *vifm-expr2*
-----
expr3 . expr3 ..     string concatenation      *vifm-expr-.*

Examples: >
  'a' . 'b'          == 'ab'
  'aaa' . '' . 'c'   == 'aaac'
<

expr3                                          *vifm-expr3*
-----

- expr3              unary minus               *vifm-expr-unary--*
+ expr3              unary plus                *vifm-expr-unary-+*

For '-' the sign of the number is changed.
For '+' the number is unchanged.

A String will be converted to a Number first.

These operations can be repeated and mixed.  Examples: >
   --9               == 9
  ---9               == -9
   -+9               == 9
<

expr4                                          *vifm-expr4*
-----

number               number constant           *vifm-expr-number*
------

Decimal number.  Examples: >
  0                  == 0
  0000               == 0
  01                 == 1
  123                == 123
  10000              == 10000
<
string                                         *vifm-expr-string*
------
"string"             string constant           *vifm-expr-quote*

Note that double quotes are used.

A string constant accepts these special characters:
\b      backspace <bs>
\e      escape <esc>
\n      newline
\r      return <cr>
\t      tab <tab>
\\      backslash
\"      double quote

Examples: >
  "\"Hello,\tWorld!\""
  "Hi,\nthere!"
<

literal-string                                 *vifm-literal-string*
--------------
'string'              string constant           *vifm-expr-'*

Note that single quotes are used.

This string is taken as it is.  No backslashes are removed or have a special
meaning.  The only exception is that two quotes stand for one quote.

Examples: >
  'All\slashes\are\saved.'
  'This string contains doubled single quotes ''here'''
<

option                                         *vifm-expr-option*
------
&option               option value

Examples: >

  echo 'Terminal size: '.&columns.'x'.&lines
  if &columns > 100
<
Any valid option name can be used here (note that "all" in ":set all" is a
pseudo option).  See |vifm-set-options|.


environment variable                           *vifm-expr-env*
--------------------
$VAR                  environment variable

The String value of any environment variable.  When it is not defined, the
result is an empty string.

Examples: >
  'This is my $PATH env: ' . $PATH
  'vifmrc at ' . $MYVIFMRC . ' is used.'
<

function call                                  *vifm-expr-function*
-------------
function(expr1, ...)  function call

See below |vifm-functions|.

Examples: >
  "'" . filetype('.') . "'"
  filetype('.') == 'reg'
<

--------------------------------------------------------------------------------
*vifm-functions*

USAGE             RESULT        DESCRIPTION	~

expand({expr})    String        Expand macros in {expr}.
filetype({fnum})  String        Returns file type from position.

expand({expr})                                 *vifm-expand()*
Expands macros in {expr} just like it's done for command-line commands.
Returns a string.  See |vifm-macros|.

Examples: >
  " percent sign
  :echo expand('%%')
  " the last part of directory name of the other pane
  :echo expand('%D:t')

filetype({fnum})                               *vifm-filetype()*
The result is a string, which represents file type and is one of the list:
    exe    executables
    reg    regular files
    link   symbolic links
    dir    directories
    char   character devices
    block  block devices
    fifo   pipes
    sock   *nix domain sockets
    ?      unknown file type (should never appear)
Parameter {fnum} can have following values:
    - '.' to get type of file under the cursor in the active pane

--------------------------------------------------------------------------------
*vifm-menus-and-dialogs*

General~

j, Ctrl-N - moves down.                        *vifm-m_j* *vifm-m_CTRL-N*
k, Ctrl-P - moves up.                          *vifm-m_k* *vifm-m_CTRL-P*
Enter, l - select and exit the menu.           *vifm-m_Enter* *vifm-m_l*
Ctrl-L - redraw the menu.                      *vifm-m_CTRL-L*

                                               *vifm-m_Escape* *vifm-m_CTRL-C*
                                               *vifm-m_ZQ* *vifm-m_ZZ*
Escape, Ctrl-C, ZZ, ZQ, q - quit.

In all menus~

Ctrl-B/Ctrl-F                                  *vifm-m_CTRL-B* *vifm-m_CTRL-F*
Ctrl-D/Ctrl-U                                  *vifm-m_CTRL-D* *vifm-m_CTRL-U*
Ctrl-E/Ctrl-Y                                  *vifm-m_CTRL-E* *vifm-m_CTRL-Y*
/ and ?                                        *vifm-m_/* *vifm-m_?*
n/N                                            *vifm-m_n* *vifm-m_N*
[count]G/[count]gg                             *vifm-m_G* *vifm-m_gg*
H/M/L                                          *vifm-m_H* *vifm-m_M* *vifm-m_L*

                                               *vifm-m_zb* *vifm-m_zt*
                                               *vifm-m_zz*
zb/zt/zz

All keys above have the same meaning as in normal mode (but not L in filetype
menu).

                                               *vifm-m_zh*
zh - scroll menu items [count] characters to the right.

                                               *vifm-m_zl*
zl - scroll menu items [count] characters to the left.

                                               *vifm-m_zH*
zH - scroll menu items half of screen width characters to the right.

                                               *vifm-m_zL*
zL - scroll menu items half of screen width characters to the left.


                                               *vifm-m_:*
: - enter command line mode for menus (currently only :exi[t], :q[uit], :x[it]
and :{range} are supported).


Below is description of additional commands and reaction on selection in some
menus and dialogs.

Apropos menu~

Selecting menu item run man on a given topic.  Menu won't be closed
automatically to allow view several pages one by one.

Colorscheme menu~

Selecting name of a colorscheme applies it.

Commands menu~

Selecting command executes it with empty arguments (|vifm-%a|).

Type dd on a command to remove.

Bookmarks menu~

Selecting bookmark navitages to it.

Type dd on a bookmark to remove.

Trash menu~

r on a file name to restore it from trash.

Directory history and Trashes menus~

Selecting directory name will change directory of the current view as if
|vifm-:cd| command was used.

Directory stack menu~

Selecting directory name will rotate stack to put selected directory pair at
the top of the stack.

Filetype menu~

Commands from vifmrc or typed in command-line are displayed above empty line.
All commands below empty line are from .desktop files.

Find and locate menus and output menu with navigation~

Selecting file name navigates previously active view to it.

Grep menu~

Selecting file opens it in editor set by |vifm-'vicmd'| at given line number.
Menu won't be closed automatically to allow viewing more than one result.

Command-line history menu~

Selecting an item will execute it as command-line command or search query.

Volumes menu~

Selecting a drive navigates previously active pane to the root of that drive.

Fileinfo dialog~

Enter - close dialog
q - close dialog

Sort dialog ~

h - switch ascending/descending.
Space - switch ascending/descending.
q - close dialog

Attributes (permissions or properties) dialog~

h - check/uncheck.
Space - check/uncheck.
q - close dialog

Item states:
* - checked flag.
X - means that it has different value for files in selection.
                                               {only for *nix}
d - (only for execute flags) means u-x+X, g-x+X or o-x+X argument for the
    chmod program.  If you want to remove execute right from all files, but
    preserve it for directories, set all execute flags to 'd' and check
    'Set Recursively' flag.

--------------------------------------------------------------------------------
*vifm-startup*

On startup vifm determines several variables that are used during the session.
They are determined in the order they appear below.

                                               *vifm-$HOME*
On *nix systems $HOME is normally present and used as is.
On Windows systems vifm tries to find correct home directory in the following
order:
 - $HOME variable;
 - $USERPROFILE variable;
 - a combination of $HOMEDRIVE and $HOMEPATH variables.

                                               *vifm-$VIFM*
vifm tries to find correct configuration directory by checking the following
places:
 - $VIFM variable;
 - parent directory of the executable file (on Windows only);
 - $HOME/.vifm directory;
 - $APPDATA/Vifm directory (on Windows only).

                                               *vifm-$MYVIFMRC*
vifm tries to find correct configuration file by checking the following places:
 - $MYVIFMRC variable;
 - vifmrc in parent directory of the executable file (on Windows only);
 - $VIFM/vifmrc file.

--------------------------------------------------------------------------------
*vifm-configure*

See |vifm-startup| section above for the explanations on |vifm-$VIFM| and
|vifm-$MYVIFMRC|.

                                               *vifm-vifmrc*
The vifmrc file contains commands that will be executed on vifm startup.  See
|vifm-$MYVIFMRC| variable description for search algorithm used to find vifmrc.
Use it to set settings, mappings, filetypes etc.  To use multi line commands
precede each next line with a slash (whitespace before slash is ignored, but all
spaces at the end of the lines are saved).  For example:
set
    \smartcase
equals "setsmartcase".  When
set<space here>
    \ smartcase
equals "set  smartcase".

                                               *vifm-vifminfo*
The $VIFM/vifminfo file contains session settings.  You may edit it by hand
to change the settings, but it's not recommended to do that, edit vifmrc
instead.  You can control what settings will be saved in vifminfo by setting
|vifm-'vifminfo'| option.  Vifm always writes this file on exit unless
|vifm-'vifminfo'| option is empty.  Bookmarks, commands, histories, filetypes,
fileviewers and registers in the file are merged with vifm configuration.

Generally, runtime configuration has bigger priority during merging, but there
are some exceptions:
 - directory stack stored in the file is not overwritten unless something is
   changed in vifm session that performs merge;
 - each bookmark is marked with a timestamp, so that newer value is not
   overwritten by older one, thus no matter from where bookmark comes, the
   newer one wins.

                                               *vifm-scripts*
The $VIFM/scripts directory can contain shell scripts.  vifm modifies
it's PATH environment variable to let user run those scripts without specifying
full path.  All subdirectories of the $VIFM/scripts will be added to PATH too.
Script in a subdirectory overlaps script with the same name in all its parent
directories.

                                               *vifm-colors*
The $VIFM/colors directory contains color schemes.

--------------------------------------------------------------------------------
*vifm-fuse*

vifm has a builtin support of automated FUSE file system mounts.  It is
implemented using file associations mechanism.  To enable automated mounts, one
needs to use a specially formated program line in |vifm-:filetype| or
|vifm-:filextype| commands.  Currently two formats are supported:

1) FUSE_MOUNT                                  *vifm-FUSE_MOUNT*
   This format should be used in case when all information needed for mounting
   all files of a particular type is the same.  E.g. mounting of tar files
   don't require any file specific options.

   Format line:
       FUSE_MOUNT|mounter %SOURCE_FILE %DESTINATION_DIR [%CLEAR]

   Example |vifm-:filetype| command: >
       :filetype FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
<

2) FUSE_MOUNT2                                 *vifm-FUSE_MOUNT2*
   This format allows to use specially formatted files to perform mounting and
   is useful for mounting remotes, for example remote file systems over ftp or
   ssh.

   Format line:
       FUSE_MOUNT2|mounter %PARAM %DESTINATION_DIR [%CLEAR]

   Example |vifm-:filetype| command: >
       :filetype FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
<
   Example file content: >
       root@127.0.0.1:/
<

All % macros are expanded by vifm at runtime and have the following meaning:
   - %SOURCE_FILE is replaced by full path to selected file
   - %DESTINATION_DIR is replaced by full path to mount directory, which is
     created by vifm basing on the value of |vifm-'fusehome'| option.
   - %PARAM value is filled from the first line of file (whole line), though
     in the future it can be changed to whole file content
   - %CLEAR means that you want to clear screen before running mount command.

%CLEAR is an optional macro.  Other macros are not mandatory, but mount
commands likely won't work without them.

The mounted FUSE file systems will be automatically unmounted in two cases:
   - when vifm quits (with |vifm-ZZ|, |vifm-:q|, etc. or when killed by signal);
   - when you explicitly leave mount point going up to its parent directory
     (with |vifm-h|, |vifm-Enter| on "../" or ":cd ..") and other pane is not
     in the same directory or its child directories.

--------------------------------------------------------------------------------
*vifm-view-look*

vifm supports displaying of file list view in two different ways:
   - in a table mode, when multiple columns can be set using |vifm-'viewcolumns'|
     option (see |vifm-column-view| for details);
   - in a multicolumn list manner which looks almost like `ls -x` command
     output (see |vifm-ls-view| for details).

The look is local for each view and can be chosen by changing value of the
|vifm-'lsview'| boolean option.

Depending on view look some of keys change their meaning to allow more natural
cursor moving.  This concerns mainly |vifm-h|, |vifm-j|, |vifm-k|, |vifm-l| and other
similar navigation keys.

Also some of options can be ignored if they don't affect view displaying in
selected look.  For example value of |vifm-'viewcolumns'| when |vifm-'lsview'| is
set.

--------------------------------------------------------------------------------
*vifm-ls-view*

When this view look is enabled by setting |vifm-'lsview'| option on, vifm will
display files in multiple columns.  Number of columns depends on the length of
the longest file name present in current directory of the view.  Whole file
list is automatically reflowed on directory change, terminal or view resize.

View looks close to output of `ls -x` command, so files are listed left to
right in rows.

In this mode file manipulation commands (e.g. |vifm-d|) don't work line-wise like
they do in Vim, since such operations would be uncommon for file manipulating
tasks.  Thus, for example, |vifm-dd| will remove only current file.

--------------------------------------------------------------------------------
*vifm-column-view*

View columns are described by a comma-separated list of column descriptions,
each of which has the following format >
    [ '-' ] [ fw ( [ '.' tw ] | '%' ) ] '{' type '}' '.'{0,3}
where fw stands for full width and tw stands for text width.

So it basically consists of four parts:
 1. Optional alignment specifier
 2. Optional width specifier
 3. Mandatory column name
 4. Optional cropping specifier

Alignment specifier~

It's an optional minus sign as the first symbol of the string.

Specifies type of text alignment within a column.  Two types are supported:
 - left align >
     set viewcolumns=-{name}
<- right align (default) >
     set viewcolumns={name}
<
Width specifier~

It's a number followed by a percent sign, two numbers (second one should be
less than or equal to the first one) separated with a dot or a single number.

Specifies column width and its units. There are tree size types:
 - absolute size - column width is specified in characters >
     set viewcolumns=-100{name},20.15{ext}
<  results in two columns with lengths of 100 and 20 and a reserved space of
   five characters on the left of second column.
 - relative (percent) size - column width is specified in percents of view width >
     set viewcolumns=-80%{name},15%{ext},5%{mtime}
<  results in three columns with lengths of 80/100, 15/100 and 5/100 of view
   width.
 - auto size (default) - column width is automatically determined >
     set viewcolumns=-{name},{ext},{mtime}
<  results in three columns with length of one third of view width. There is
   no size adjustment to content, since it will slow down rendering.

Columns of different sizing types can be freely mixed in one view. Though
sometimes some of columns can be seen partly or be completely invisible if
there is not enough space to display them.

Column name~

This is just a sort key surrounded with curly braces, e.g. >
    {name},{ext},{mtime}
<
{name} and {iname} keys are the same and present both for consistency with
|vifm-'sort'| option.

Empty curly braces ({}) are replaced with the default secondary column for
primary sort key. So after the next command views will be displayed almost as
if |vifm-'viewcolumns'| is empty, but adding ellipsis for long file names: >
    set viewcolumns=-{name}..,6{}.
<
Cropping specifier~

It's from one to three dots after closing curly brace in column format.

Specifies type of text truncation if it doesn't fix in the column. Currently
tree types are supported:
 - truncation - text is truncated >
     set viewcolumns=-{name}.
<  results in truncation of names that are too long too fit in the view.
 - adding of ellipsis - ellipsis on the left or right are added when needed >
     set viewcolumns=-{name}..
<  results in that ellipsis are added at the end of too long file names.
 - none (default) - text can pass column boundaries >
     set viewcolumns=-{name}...,{ext}
<  results in that long file names can partially be written on the ext column.

--------------------------------------------------------------------------------
*vifm-colorschemes*

The color schemes in vifm can be applied in two different ways:
   - as the default (or main) color scheme
   - as local to a panel color scheme

Both types are set using |vifm-:colorscheme| command, but of different forms:
   - :colorscheme color_scheme_name - for the default color scheme
   - :colorscheme color_scheme_name directory - for local color schemes

Look of different parts of the TUI (Text User Interface) is determined in
this way:
   - Border, TopLineSel, TopLine, CmdLine, ErrorMsg, StatusLine and WildMenu
     are always determined by the default color scheme
   - CurrLine, Selected, Directory, Link, BrokenLink, Socket, Device,
     Executable, Fifo and Win are determined by default color scheme and a set
     of local colorschemes, which can be empty

There might be a set of local color schemes because they are structured
hierarchically according to file system structure. For example, having the
following piece of file system: >

 ~
 `-- bin
    |
    `-- my
<
Two color schemes: >

 # ~/.vifm/colors/for_bin
 highlight Win cterm=none ctermfg=white ctermbg=red
 highlight CurrLine cterm=none ctermfg=red ctermbg=black

 # ~/.vifm/colors/for_bin_my
 highlight CurrLine cterm=none ctermfg=green ctermbg=black
<
And these three commands in the vifmrc file: >

 colorscheme Default
 colorscheme for_bin ~/bin
 colorscheme for_bin_my ~/bin/my
<
File list will look in the following way for each level:
   - ~/ - Default color scheme
       black background
       cursor with blue background
   - ~/bin/ - mix of Default and for_bin color schemes
       red background
       cursor with black background and red foreground
   - ~/bin/my/ - mix of Default, for_bin and for_bin_my color schemes
       red background
       cursor with black background and green foreground

--------------------------------------------------------------------------------
*vifm-trash*

vifm has support of trash directory, which is used as temporary storage for
deleted files or files that were cut.  Using trash is controlled by the
|vifm-'trash'| option, and exact path to the trash can be set with
|vifm-'trashdir'| option.  Trash directory in vifm differs from the system-wide
one by default, because of possible incompatibilities of storing deleted files
among different file managers.  But one can set |vifm-'trashdir'| to
"~/.local/share/Trash" to use a "standard" trash directory.

There are two scenarios of using trash in vifm:

1. As a place for storing files that were cut by |vifm-d| and may be
   inserted to some other place in file system.
2. As a storage of files, that are deleted but not purged yet.

The first scenario uses deletion (|vifm-d|) operations to put files to
trash and put (|vifm-p|) operations to restore files from trash directory.
Note that such operations move files to and from trash directory,
which can be long term operations in case of different partitions or
remote drives mounted locally.

The second scenario uses deletion (|vifm-d|) operations for moving files
to trash directory and |vifm-:empty| command-line command to purge all
previously deleted files.

Deletion and put operations depend on registers, which can point to files in
trash directory.  Normally, there are no nonexistent files in registers, but
vifm doesn't keep track of modifications under trash directory, so one
shouldn't expect value of registers to be absolutely correct if trash
directory was modified not by operation that are meant for it.  But this
won't lead to any issues with operations, since they ignore nonexistent
files.

--------------------------------------------------------------------------------
*vifm-clientserver*

vifm supports remote execution of command-line mode commands as well as remote
changing of directories.  This is possible using |vifm---remote| command-line
argument.

To execute a command remotely combine --remote argument with |vifm--c| or
|vifm--+c|.  For example: >
    vifm --remote -c 'cd /'
    vifm --remote '+cd /'
<
To change directory not using command-line mode commands one can specify paths
right after --remote argument, like this: >
    vifm --remote /
    vifm --remote ~
    vifm --remote /usr/bin /tmp
<
At the moment there is no way of specifying, which instance of vifm should
arguments be sent.  The main purpose of --remote argument is to provide
support of using vifm as a single-instance application.

--------------------------------------------------------------------------------
*vifm-plugin*

vifm-plugin for using vifm in vim as a file selector.

Commands:

  :EditVifm   select a file or files to open in the current buffer.
  :SplitVifm  split buffer and select a file or files to open.
  :VsplitVifm vertically split buffer and select a file or files to open.
  :DiffVifm   select a file or files to compare to the current file with
              :vert diffsplit.
  :TabVifm    select a file or files to open in tabs.

Each command accepts up to two arguments: left pane directory and right pane
directory.  After arguments are checked, vifm process is spawned in a special
"file-picker" mode.  To pick files just open them either by pressing l, i or
Enter keys, or by running :edit command.  If no files are selected, file
under the cursor is opened, otherwise whole selection is passed to the plugin
and opened in vim.

The plugin have only two settings.  It's a string variable named g:vifm_term to
let user specify command to run gui terminal.  By default it's equal to
'xterm -e'.  And another string variable named g:vifm_exec, which equals "vifm"
by default and specifies path to vifm's executable.  To pass arguments to
vifm use g:vifm_exec_args, which is empty by default.

To use the plugin copy the vifm.vim file to either the system wide vim/plugin
directory or into ~/.vim/plugin.

If you would prefer not to use the plugin and it is in the system wide plugin
directory add

let loaded_vifm=1

to your ~/.vimrc file.

--------------------------------------------------------------------------------
*vifm-reserved*

The following command names are reserved and shouldn't be used for user
commands.

  g[lobal]
  v[global]

--------------------------------------------------------------------------------
*vifm-see-also*

Website: http://vifm.sourceforge.net/

Esperanto translation of the documentation by Sebastian Cyprych:
http://cyprych.neostrada.pl/tekstoj/komputiloj/vifm-help.eo.html

--------------------------------------------------------------------------------
 vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:
